<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>TEG后端开发一面总结</title>
      <link href="/2020/03/24/teg-view-one/"/>
      <url>/2020/03/24/teg-view-one/</url>
      
        <content type="html"><![CDATA[<p>今天参加了TEG后端开发的处女面，感觉还可以，对今天的面试做个简短的总结，同时也为可能的后来人做个参考。</p><a id="more"></a><p>首先一开始就先问问你哪里人，在什么地方面试这种比较无关紧要的话题，缓和一下气氛。</p><p>接下来根据简历开始问，既然你参加了算法竞赛，那么你在队里是一个什么位置，主要做哪些题。</p><p>我说都有一些涉及，数论啊图论啊数据结构啊这些，面试官就抓住了数据结构这一点，开始进行数据结构的提问。提问问到了你都认识哪些数据结构，对于这些数据结构有什么特点。</p><p>当时太紧张了，把栈和队列都混起来了，还好面试官打了圆场提醒了一下，我才能继续接下去。下面又问了认识的排序算法，快排是不是稳定的排序，然后对于每个数据结构的复杂度，重点提问了红黑树的原理，和哈希表的坑（也就是哈希碰撞要怎么处理），这些都回答的还算到点，最后问了一个问题，怎么在很多数据里面找到最大的100个数，我脱口而出用优先队列，面试官让我再想想，但是我真的想不出来更好的方法了……然后就随便回答了一个用位图啥的，结束后一看发现还可以用分治的方法，然后还有一个hash去重，算了算了。。。（靠当初为什么没说并行化算法也可以啊）。</p><p>面完了数据结构就是计算机网络的提问，让我复述OSI七层模型，但是我只说出来了TCP/IP的五层（其他平时又用不到。。。），面试官也没有继续多问，让我说了一下从浏览器中输入一个URL按下回车发生了什么，然后还有traceroute的原理，以及如果你打不开网站你要怎么去排查网络故障这些基本都答上来了。</p><p>然后就到了操作系统，操作系统提问的比较少，就只是问了一下进程和线程的区别，然后线程并发处理的时候怎么去解决消息队列的冲突。我当时回答加锁，结果他说加锁效率太低了，有没有更好的方法，我想到那个哲学家进餐问题，搞个服务员，所以回答加入一个调度者代替每个线程去访问消息队列。</p><p>接下来是数据库，嗯，这部分比较惨，丢过来给我一个sql语句，带有where和group by语句的，问这个sql语句的执行顺序是什么，我当时回答的比较混乱，然后问了我都用过哪些数据库，我只用过mysql和sqlite（这个大概不算）。还有问了如何区分唯一索引和主键索引，这个我只回答上了主键索引只能有一个，但是唯一索引可以有很多个，没了。</p><p>最后由于简历上有写，于是还加入了一些安全方面的问题，问了我如何安全的存储网站的密码，就回答哈希加盐。还有让我讲讲HTTPS的原理（这我哪知道），回答了一些浏览器预置证书去验证网站身份啊，然后非对称密钥交换，最后对称加密传输数据。</p><p>大概能记起来问题的就这么多了，最后面试官问了一下有没有还有问的问题，就很普通的问了学习的建议之类的，就结束了这次面试。</p><p>总的来说，我对这次的面试还算满意，但是也体会到了自己仍然不少不足之处，总后面的面试也要加油！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> 面试 </tag>
            
            <tag> 经验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SICP开坑——使用Scheme搜索不动点</title>
      <link href="/2020/03/16/fix-points-with-scheme/"/>
      <url>/2020/03/16/fix-points-with-scheme/</url>
      
        <content type="html"><![CDATA[<p>最近去读了SICP的第一章，初次领悟到了函数式编程的魅力。曾经尝试过好几次入坑，但是都是跟着网上奇奇怪怪的教程入的，不久就放弃了。这次要一鼓作气读完这本大部头！<s>flag立起来了</s></p><a id="more"></a><p>对于求一些式子的值，比如<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msqrt><mi>x</mi></msqrt></mrow><annotation encoding="application/x-tex">\sqrt{x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.23972em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault">x</span></span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width="400em" height="1.08em" viewbox="0 0 400000 1080" preserveaspectratio="xMinYMin slice"><path d="M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z M834 80H400000v40H845z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span></span></span></span>，曾经在课上学过牛顿法等去计算，但是一直又都没有真正理解为什么这样去计算，在SICP中，介绍了一种寻找不动点来计算这类值的方法。所谓不动点，就是当函数的输入等于输出时的一个点，这个时候有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">f(x) = x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span>，以刚才的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi><mo>=</mo><msqrt><mi>x</mi></msqrt></mrow><annotation encoding="application/x-tex">y = \sqrt{x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.23972em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault">x</span></span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width="400em" height="1.08em" viewbox="0 0 400000 1080" preserveaspectratio="xMinYMin slice"><path d="M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z M834 80H400000v40H845z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span></span></span></span>举例子，可以有以下推导：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi><mo>=</mo><msqrt><mi>x</mi></msqrt><mspace linebreak="newline"></mspace><msup><mi>y</mi><mn>2</mn></msup><mo>=</mo><mi>x</mi><mspace linebreak="newline"></mspace><mi>y</mi><mo>=</mo><mfrac><mi>x</mi><mi>y</mi></mfrac></mrow><annotation encoding="application/x-tex">y = \sqrt{x}\\y^2 = x \\y = \frac{x}{y}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.190845em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8491550000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault">x</span></span></span><span style="top:-2.809155em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width="400em" height="1.08em" viewbox="0 0 400000 1080" preserveaspectratio="xMinYMin slice"><path d="M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z M834 80H400000v40H845z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.190845em;"><span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1.0585479999999998em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.9880000000000002em;vertical-align:-0.8804400000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>如果设<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mi>x</mi><mi>y</mi></mfrac></mrow><annotation encoding="application/x-tex">f(y) = \frac{x}{y}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1764999999999999em;vertical-align:-0.481108em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.481108em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>，就可发现，计算<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msqrt><mi>x</mi></msqrt></mrow><annotation encoding="application/x-tex">\sqrt{x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.23972em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault">x</span></span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width="400em" height="1.08em" viewbox="0 0 400000 1080" preserveaspectratio="xMinYMin slice"><path d="M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z M834 80H400000v40H845z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span></span></span></span>的值就等价于寻找<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span>这个函数的不动点，只要找到一个不动点，就可以确定这个开2次方的结果。</p><p>使用普通的迭代算法，即首先随意选择一个猜测值，然后带入函数中，如果不是不动点就将函数的输出作为输入再代入一次，直到找到一个不动点。</p><p>但是新的问题又来了，怎么保证这样做下去一定会找到一个不动点呢？关于这一点，SICP没有告诉我们，因为涉及到了大量的数学知识。但是我发现了这个定理</p><p>设<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>y</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">y_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span></span>的一个不定点，当且仅当<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><msup><mi>f</mi><mo mathvariant="normal">′</mo></msup><mo stretchy="false">(</mo><msub><mi>y</mi><mn>0</mn></msub><mo stretchy="false">)</mo><mi mathvariant="normal">∣</mi><mo>&lt;</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">|f&#x27;(y_0)| &lt; 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.001892em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>时，在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>y</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">y_{0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>附近不动点有局部收敛性，也就是说，要保证这个方法收敛，就必须保证<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><msup><mi>f</mi><mo mathvariant="normal">′</mo></msup><mo stretchy="false">(</mo><msub><mi>y</mi><mn>0</mn></msub><mo stretchy="false">)</mo><mi mathvariant="normal">∣</mi><mo>&lt;</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">|f&#x27;(y_0)| &lt; 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.001892em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>。如果将之前的函数求导，会发现是等于1的，并不小于1，这种方法不能收敛，SICP 给的方法是对原方程进行一些变形，每次得到的不是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span>，而是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span>的平均值，这种方法叫做平均阻尼，也就是变成下面这种样子：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi><mo>=</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mo stretchy="false">(</mo><mfrac><mi>x</mi><mi>y</mi></mfrac><mo>+</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">y = \frac{1}{2}(\frac{x}{y} + y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.20188em;vertical-align:-0.8804400000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span></span></p><p>这样的话得到了一个不一样的函数，计算出导数就是小于1的了。</p><p>SICP 在章节的最后留了一个问题，这样的变形对于求2次方是可以的，但是求4次方时就无能为力了，但是可以做两次平均阻尼来完成，也就是变成：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi><mo>=</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mo stretchy="false">(</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mo stretchy="false">(</mo><mfrac><mi>x</mi><mi>y</mi></mfrac><mo>+</mo><mi>y</mi><mo stretchy="false">)</mo><mo>+</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">y = \frac{1}{2}(\frac{1}{2}(\frac{x}{y} + y) + y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.20188em;vertical-align:-0.8804400000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span></span></p><p>可以证明这个方程仍然和原方程相等，但是是在求n次方根的时候，要做多少次平均阻尼才能收敛呢，虽然 SICP 让做实验得出结论，但是有了上面的定理，我尝试使用公式推导出来了这个结果，以下是推导过程：</p><p>设求的是n次方根，需要做a次平均阻尼才能让这个函数收敛，不妨先观察 a=1,2,3 时候这个公式的变形情况</p><p>a = 1时</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi><mo>=</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mo stretchy="false">(</mo><mfrac><mi>x</mi><msup><mi>y</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup></mfrac><mo>+</mo><mi>y</mi><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mspace linebreak="newline"></mspace><mi>y</mi><mo>=</mo><mfrac><mi>x</mi><mrow><mn>2</mn><msup><mi>y</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow></mfrac><mo>+</mo><mfrac><mi>y</mi><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">y = \frac{1}{2}(\frac{x}{y^{n-1}}+y)\\\\y = \frac{x}{2y^{n-1}}+\frac{y}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.20188em;vertical-align:-0.8804400000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.9880000000000002em;vertical-align:-0.8804400000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.7935599999999998em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1075599999999999em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>a = 2时</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi><mo>=</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mfrac><mi>x</mi><mrow><mn>2</mn><msup><mi>y</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow></mfrac><mo>+</mo><mfrac><mi>y</mi><mn>2</mn></mfrac><mo stretchy="false">)</mo><mo>+</mo><mi>y</mi><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mspace linebreak="newline"></mspace><mi>y</mi><mo>=</mo><mfrac><mi>x</mi><mrow><msup><mn>2</mn><mn>2</mn></msup><msup><mi>y</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow></mfrac><mo>+</mo><mfrac><mrow><mi>y</mi><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mn>2</mn><mo stretchy="false">)</mo></mrow><msup><mn>2</mn><mn>2</mn></msup></mfrac></mrow><annotation encoding="application/x-tex">y = \frac{1}{2}((\frac{x}{2y^{n-1}} + \frac{y}{2}) + y)\\\\y = \frac{x}{2^2y^{n-1}} + \frac{y(1+2)}{2^2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.20188em;vertical-align:-0.8804400000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mopen">(</span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.7935599999999998em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1075599999999999em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.9880000000000002em;vertical-align:-0.8804400000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.113em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>a = 3时</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi><mo>=</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mfrac><mi>x</mi><mrow><msup><mn>2</mn><mn>2</mn></msup><msup><mi>y</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow></mfrac><mo>+</mo><mfrac><mrow><mi>y</mi><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mn>2</mn><mo stretchy="false">)</mo></mrow><msup><mn>2</mn><mn>2</mn></msup></mfrac><mo stretchy="false">)</mo><mo>+</mo><mi>y</mi><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mspace linebreak="newline"></mspace><mi>y</mi><mo>=</mo><mfrac><mi>x</mi><mrow><msup><mn>2</mn><mn>3</mn></msup><msup><mi>y</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow></mfrac><mo>+</mo><mfrac><mrow><mi>y</mi><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mn>2</mn><mo>+</mo><msup><mn>2</mn><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><msup><mn>2</mn><mn>3</mn></msup></mfrac></mrow><annotation encoding="application/x-tex">y = \frac{1}{2}((\frac{x}{2^2y^{n-1}} + \frac{y(1+2)}{2^2}) + y)\\\\y = \frac{x}{2^3y^{n-1}} + \frac{y(1+2+2^2)}{2^3}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.20188em;vertical-align:-0.8804400000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mopen">(</span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.113em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.9880000000000002em;vertical-align:-0.8804400000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.177108em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>通过对上面几种情况的归纳，可以得出一般的规律：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi><mo>=</mo><mfrac><mi>x</mi><mrow><msup><mn>2</mn><mi>a</mi></msup><msup><mi>y</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow></mfrac><mo>+</mo><mfrac><mrow><mi>y</mi><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><msup><mn>2</mn><mn>1</mn></msup><mo>+</mo><msup><mn>2</mn><mn>2</mn></msup><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><msup><mn>2</mn><mrow><mi>a</mi><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy="false">)</mo></mrow><msup><mn>2</mn><mi>a</mi></msup></mfrac><mspace linebreak="newline"></mspace><mspace linebreak="newline"></mspace><mi>y</mi><mo>=</mo><mfrac><mi>x</mi><mrow><msup><mn>2</mn><mi>a</mi></msup><msup><mi>y</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow></mfrac><mo>+</mo><mfrac><mrow><mi>y</mi><mo stretchy="false">(</mo><msup><mn>2</mn><mi>a</mi></msup><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><msup><mn>2</mn><mi>a</mi></msup></mfrac></mrow><annotation encoding="application/x-tex">y = \frac{x}{2^ay^{n-1}} + \frac{y(1+2^1+2^2+...+2^{a-1})}{2^a}\\\\y = \frac{x}{2^ay^{n-1}} + \frac{y(2^a-1)}{2^a}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.9880000000000002em;vertical-align:-0.8804400000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.590392em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.177108em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.590392em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace newline"></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.9880000000000002em;vertical-align:-0.8804400000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.590392em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.113em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.590392em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>这个时候即可设</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mi>x</mi><mrow><msup><mn>2</mn><mi>a</mi></msup><msup><mi>y</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow></mfrac><mo>+</mo><mfrac><mrow><mi>y</mi><mo stretchy="false">(</mo><msup><mn>2</mn><mi>a</mi></msup><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><msup><mn>2</mn><mi>a</mi></msup></mfrac></mrow><annotation encoding="application/x-tex">f(y) = \frac{x}{2^ay^{n-1}} + \frac{y(2^a-1)}{2^a}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.9880000000000002em;vertical-align:-0.8804400000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.590392em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.113em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.590392em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>对这个函数求导，可以得到</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi>d</mi><mi>f</mi></mrow><mrow><mi>d</mi><mi>y</mi></mrow></mfrac><mo>=</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>n</mi><mo stretchy="false">)</mo><mfrac><mi>x</mi><mrow><msup><mn>2</mn><mi>a</mi></msup><msup><mi>y</mi><mi>n</mi></msup></mrow></mfrac><mo>+</mo><mfrac><mrow><msup><mn>2</mn><mi>a</mi></msup><mo>−</mo><mn>1</mn></mrow><msup><mn>2</mn><mi>a</mi></msup></mfrac></mrow><annotation encoding="application/x-tex">\frac{df}{dy} = (1-n)\frac{x}{2^ay^n} + \frac{2^a-1}{2^a}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.25188em;vertical-align:-0.8804400000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714399999999998em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.9880000000000002em;vertical-align:-0.8804400000000001em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.590392em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.590392em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.027392em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.341392em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.590392em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>可以知道，在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span>的不动点处，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>y</mi><mi>n</mi></msup><mo>=</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">y^n = x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.858832em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span>，将这个结论带入，并且已知导数的绝对值小于1，可以得到</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><mfrac><mrow><mn>1</mn><mo>−</mo><mi>n</mi></mrow><msup><mn>2</mn><mi>a</mi></msup></mfrac><mo>+</mo><mfrac><mrow><msup><mn>2</mn><mi>a</mi></msup><mo>−</mo><mn>1</mn></mrow><msup><mn>2</mn><mi>a</mi></msup></mfrac><mi mathvariant="normal">∣</mi><mo>&lt;</mo><mn>1</mn><mspace linebreak="newline"></mspace><mspace linebreak="newline"></mspace><mi mathvariant="normal">∣</mi><mfrac><mrow><msup><mn>2</mn><mi>a</mi></msup><mo>−</mo><mi>n</mi></mrow><msup><mn>2</mn><mi>a</mi></msup></mfrac><mi mathvariant="normal">∣</mi><mo>&lt;</mo><mn>1</mn><mspace linebreak="newline"></mspace><mspace linebreak="newline"></mspace><mi mathvariant="normal">∣</mi><mn>1</mn><mo>−</mo><mfrac><mi>n</mi><msup><mn>2</mn><mi>a</mi></msup></mfrac><mi mathvariant="normal">∣</mi><mo>&lt;</mo><mn>1</mn><mspace linebreak="newline"></mspace><mspace linebreak="newline"></mspace><mi mathvariant="normal">∣</mi><mfrac><mi>n</mi><msup><mn>2</mn><mi>a</mi></msup></mfrac><mo>−</mo><mn>1</mn><mi mathvariant="normal">∣</mi><mo>&lt;</mo><mn>1</mn><mspace linebreak="newline"></mspace><mspace linebreak="newline"></mspace><mo>−</mo><mn>1</mn><mo>&lt;</mo><mfrac><mi>n</mi><msup><mn>2</mn><mi>a</mi></msup></mfrac><mo>−</mo><mn>1</mn><mo>&lt;</mo><mn>1</mn><mspace linebreak="newline"></mspace><mspace linebreak="newline"></mspace><mn>0</mn><mo>&lt;</mo><mfrac><mi>n</mi><msup><mn>2</mn><mi>a</mi></msup></mfrac><mo>&lt;</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">|\frac{1-n}{2^a} +\frac{2^a-1}{2^a}| &lt; 1\\\\|\frac{2^a-n}{2^a}| &lt; 1\\\\|1-\frac{n}{2^a}| &lt; 1\\\\|\frac{n}{2^a}-1| &lt;1\\\\-1 &lt; \frac{n}{2^a}-1 &lt; 1\\\\0 &lt; \frac{n}{2^a} &lt; 2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord">∣</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.590392em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.027392em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.341392em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.590392em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span><span class="mspace newline"></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:2.027392em;vertical-align:-0.686em;"></span><span class="mord">∣</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.341392em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.590392em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span><span class="mspace newline"></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.7935600000000003em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.590392em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span><span class="mspace newline"></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1.7935600000000003em;vertical-align:-0.686em;"></span><span class="mord">∣</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.590392em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="mspace newline"></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68354em;vertical-align:-0.0391em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.7935600000000003em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.590392em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68354em;vertical-align:-0.0391em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span><span class="mspace newline"></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.68354em;vertical-align:-0.0391em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.7935600000000003em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.590392em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span></span></p><p>由于我们知道n一定大于0，所以可以省略大于0的条件，得到下面的式子</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mi>n</mi><msup><mn>2</mn><mi>a</mi></msup></mfrac><mo>&lt;</mo><mn>2</mn><mspace linebreak="newline"></mspace><mspace linebreak="newline"></mspace><mi>n</mi><mo>&lt;</mo><msup><mn>2</mn><mrow><mi>a</mi><mo>+</mo><mn>1</mn></mrow></msup><mspace linebreak="newline"></mspace><mspace linebreak="newline"></mspace><mi>a</mi><mo>+</mo><mn>1</mn><mo>&gt;</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>n</mi><mspace linebreak="newline"></mspace><mspace linebreak="newline"></mspace><mi>a</mi><mo>&gt;</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\frac{n}{2^a} &lt; 2\\\\n &lt; 2^{a+1}\\\\a+1 &gt; \log_2n\\\\a &gt; \log_2n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.7935600000000003em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.590392em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span><span class="mspace newline"></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.864108em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68354em;vertical-align:-0.0391em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.93858em;vertical-align:-0.24414em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span></span><span class="mspace newline"></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.93858em;vertical-align:-0.24414em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></span></p><p>真相大白了，原来做平均阻尼的次数只需要<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>n</mi></mrow><annotation encoding="application/x-tex">\log_2n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.93858em;vertical-align:-0.24414em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span></span></span></span>次就够了，最终的练习是使用Scheme编写一个能够计算n次方根的过程，下面是代码</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">define</span></span> (<span class="name">repeated</span> f n)</span><br><span class="line">  (<span class="name"><span class="builtin-name">if</span></span> (<span class="name"><span class="builtin-name">=</span></span> n <span class="number">1</span>)</span><br><span class="line">    f</span><br><span class="line">    (<span class="name"><span class="builtin-name">lambda</span></span> (x)</span><br><span class="line">      (<span class="name">f</span> ((<span class="name">repeated</span> f (<span class="name"><span class="builtin-name">-</span></span> n <span class="number">1</span>)) x)))))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="builtin-name">define</span></span> tolerance <span class="number">0.00001</span>)</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="builtin-name">define</span></span> (<span class="name">fixed-point</span> f first-guess)</span><br><span class="line">  (<span class="name"><span class="builtin-name">define</span></span> (<span class="name">close-enough?</span> v1 v2)</span><br><span class="line">    (<span class="name"><span class="builtin-name">&lt;</span></span> (<span class="name"><span class="builtin-name">abs</span></span> (<span class="name"><span class="builtin-name">-</span></span> v1 v2)) tolerance))</span><br><span class="line">  (<span class="name"><span class="builtin-name">define</span></span> (<span class="name">try</span> guess)</span><br><span class="line">    (<span class="name"><span class="builtin-name">let</span></span> ((<span class="name">next</span> (<span class="name">f</span> guess)))</span><br><span class="line">      (<span class="name"><span class="builtin-name">if</span></span> (<span class="name">close-enough?</span> guess next)</span><br><span class="line">        next</span><br><span class="line">        (<span class="name">try</span> next))))</span><br><span class="line">  (<span class="name">try</span> first-guess))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="builtin-name">define</span></span> (<span class="name">average</span> a b)</span><br><span class="line">  (<span class="name"><span class="builtin-name">/</span></span> (<span class="name"><span class="builtin-name">+</span></span> a</span><br><span class="line">        b)</span><br><span class="line">     <span class="number">2.0</span>))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="builtin-name">define</span></span> (<span class="name">average-damp</span> f)</span><br><span class="line">  (<span class="name"><span class="builtin-name">lambda</span></span> (x)</span><br><span class="line">    (<span class="name">average</span></span><br><span class="line">      (<span class="name">f</span> x)</span><br><span class="line">      x)))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="builtin-name">define</span></span> (<span class="name">ilog2</span> x)</span><br><span class="line">  (<span class="name"><span class="builtin-name">define</span></span> (<span class="name">iter</span> it res)</span><br><span class="line">    (<span class="name"><span class="builtin-name">if</span></span> (<span class="name"><span class="builtin-name">=</span></span> it <span class="number">1</span>)</span><br><span class="line">      res</span><br><span class="line">      (<span class="name">iter</span></span><br><span class="line">        (<span class="name">arithmetic-shift</span> it <span class="number">-1</span>)</span><br><span class="line">        (<span class="name"><span class="builtin-name">+</span></span> res <span class="number">1</span>))))</span><br><span class="line">  (<span class="name">iter</span> x <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="builtin-name">define</span></span> (<span class="name">pow</span> a b)</span><br><span class="line">  (<span class="name"><span class="builtin-name">cond</span></span></span><br><span class="line">    ((<span class="name"><span class="builtin-name">=</span></span> a <span class="number">0</span>) <span class="number">0.0</span>)</span><br><span class="line">    ((<span class="name"><span class="builtin-name">=</span></span> b <span class="number">0</span>) <span class="number">1.0</span>)</span><br><span class="line">    (<span class="name"><span class="builtin-name">else</span></span></span><br><span class="line">      (<span class="name"><span class="builtin-name">let</span></span> ((<span class="name">res</span> (<span class="name">pow</span> a (<span class="name">arithmetic-shift</span> b <span class="number">-1</span>))))</span><br><span class="line">        (<span class="name"><span class="builtin-name">*</span></span> res</span><br><span class="line">           res</span><br><span class="line">           (<span class="name"><span class="builtin-name">if</span></span> (<span class="name"><span class="builtin-name">=</span></span> (<span class="name"><span class="builtin-name">remainder</span></span> b <span class="number">2</span>) <span class="number">0.0</span>)</span><br><span class="line">             <span class="number">1.0</span></span><br><span class="line">             a))))))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="builtin-name">define</span></span> (<span class="name">sqrtn</span> x n)</span><br><span class="line">  (<span class="name">fixed-point</span> ((<span class="name">repeated</span></span><br><span class="line">                  average-damp</span><br><span class="line">                  (<span class="name">ilog2</span> n))</span><br><span class="line">                (<span class="name"><span class="builtin-name">lambda</span></span> (y)</span><br><span class="line">                  (<span class="name"><span class="builtin-name">/</span></span> x</span><br><span class="line">                     (<span class="name">pow</span> y (<span class="name"><span class="builtin-name">-</span></span> n <span class="number">1</span>)))))</span><br><span class="line">               (<span class="name">average</span> x</span><br><span class="line">                        (<span class="name">pow</span> x n))))</span><br><span class="line"></span><br><span class="line">(<span class="name">sqrtn</span> <span class="number">2</span> <span class="number">12</span>)</span><br></pre></td></tr></table></figure><p>我在最后最终做了一个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mroot><mn>2</mn><mn>12</mn></mroot></mrow><annotation encoding="application/x-tex">\sqrt[12]{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.13278em;"></span><span class="mord sqrt"><span class="root"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7868839999999999em;"><span style="top:-2.964664em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size6 size1 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.90722em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord">2</span></span></span><span style="top:-2.86722em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width="400em" height="1.08em" viewbox="0 0 400000 1080" preserveaspectratio="xMinYMin slice"><path d="M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z M834 80H400000v40H845z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.13278em;"><span></span></span></span></span></span></span></span></span>的计算，结果是1.059465254018959，代入计算器中基本符合计算要求，可以观察得到之前的推演是正确的</p><p>总结：</p><p>之前对偏数学上理解程序很弱，需要进一步提高</p>]]></content>
      
      
      
        <tags>
            
            <tag> SICP </tag>
            
            <tag> Scheme </tag>
            
            <tag> 函数式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>老文章迁移</title>
      <link href="/2020/03/04/archivefix/"/>
      <url>/2020/03/04/archivefix/</url>
      
        <content type="html"><![CDATA[<p>迁移到Github Page后，一直没有把之前文章的存档迁移到现在的平台。今天尝试写了一个python脚本批量转换了一下,遇到了一些问题，在此记录一下</p><a id="more"></a><p>首先由于之前是突然被删库的，很多文章都没来得及保存，这个找不回来了(sigh)。</p><p>然后是很多文章都没有保存时间，但是由于我保存的是独立文件的MarkDown档案，只需要使用python获取每个文件的创建时间就好了，然后hexo的标题机制也和之前的完全不一样，导致只能用一些手段把文章开头的MarkDown大标题去掉，直接找到第一组‘=’、‘-’这种特殊符号段删掉就好了，但是一开始对于一些没有标题的文章也会误伤，非常Hack。。。。</p><p>最后就是文章图片缺失标签缺失，分割缺失，这个就不是能够自动化解决的问题了，坑得一点点手动补上。</p><p>最后附上迁移的代码，以作备忘</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(<span class="string">'./'</span>):</span><br><span class="line">        title, extension = os.path.splitext(filename)</span><br><span class="line">        <span class="keyword">if</span> extension <span class="keyword">not</span> <span class="keyword">in</span> [<span class="string">'.md'</span>, <span class="string">'.MD'</span>]:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        mtime = os.path.getmtime(filename)</span><br><span class="line">        datestr = time.strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>, time.localtime(mtime))</span><br><span class="line">        print(datestr)</span><br><span class="line">        <span class="keyword">with</span> open(filename, <span class="string">'r+'</span>) <span class="keyword">as</span> fd:</span><br><span class="line">            cont = fd.read()</span><br><span class="line">            fd.seek(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">            cont = cont.split(<span class="string">'==='</span>, <span class="number">1</span>)[<span class="number">-1</span>]</span><br><span class="line">            cont = cont.strip(<span class="string">'='</span>)</span><br><span class="line">            temp = cont.split(<span class="string">'---'</span>, <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> len(temp) &gt; <span class="number">1</span> <span class="keyword">and</span> len(temp[<span class="number">0</span>]) &lt; <span class="number">50</span>:</span><br><span class="line">                cont = temp[<span class="number">-1</span>]</span><br><span class="line">            cont = cont.strip(<span class="string">'-'</span>)</span><br><span class="line">            cont = cont.strip()</span><br><span class="line">            cont = <span class="string">"---\ntitle: %s\ndate: %s\n---\n"</span>%(title, datestr) + cont</span><br><span class="line">            fd.write(cont)</span><br><span class="line">    </span><br><span class="line">main()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 管理 </tag>
            
            <tag> 迁移 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019 ICPC南京站总结</title>
      <link href="/2019/10/27/icpc2019-nanjing/"/>
      <url>/2019/10/27/icpc2019-nanjing/</url>
      
        <content type="html"><![CDATA[<p>这次到南京站也还算有收获，终于没有打铁了（多亏队友</p><a id="more"></a><p>首先拿到题面第一题看的C，判断是dfs枚举每个方格的次态，但是当时没有好好读题，直到后面队友指出才发现可以从1开始。。。<br>不过还好，做法区别也不大，多开了4维保存一下有多少个长度为k的后继就可以了。结果一发过了。算是弥补我们队没及时签上A题的遗憾。</p><p>然后A题结果就是结论题，这题基本没参与，但是事后看过来真的很容易想多，要不是看到其他人过的很快马上推翻筛素数的想法，可能一直要WA或者TLE。（想太多了）</p><p>接下来看的是K题，计算几何，当时看到给了8秒找点，以为又是跟去年一样的模拟退火。<br>结果一看T太大了，搞不了。<br>最后发现只要确定了平分点所处的边，在这条边上移动，两边的面积就是单调变化的。<br>直接二分写的，模板过于复杂没有用，结对编程找了不少错，终于跌跌撞撞过了，但是因为测试不够还是WA了几发，以及一次把精度开太高了的不必要罚时。（论测试的重要性）</p><p>然后就是H题，其实也是结论题，但是由于题面太绕，WA的第一反应不是检查边界条件而是总想着是不是读错题了，是不是结论不对。<br>但是其实就是一个很简单的边界值，很多人没想到，想到就很简单。</p><p>最后看了剩下过的人最多的J，数据范围很大，只能想到离散化，进一步就想不到了。<br>还有一个大模拟的G其实也应该看看，但是一个人没交，想着还是算了。。。（还是菜</p><p>总体而言，能够拿到铜牌也算是有所收获，但是由于这样或那样原因，还是产生了一些不应该的失误。<br>以后吸取这次的教训～</p><p>PS：这次也算是收获了平面几何的做法（用复数），可以减少不少代码量。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> 程序设计 </tag>
            
            <tag> ICPC </tag>
            
            <tag> 竞赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>包的路由转圈圈——谈谈使用nftables配置透明代理碰到的那些坑</title>
      <link href="/2019/08/19/tproxy-config-with-nftables/"/>
      <url>/2019/08/19/tproxy-config-with-nftables/</url>
      
        <content type="html"><![CDATA[<img src="/2019/08/19/tproxy-config-with-nftables/package_lost.png" title="灵魂画手上线"><p>透明代理，可以使得在代理后面的所有流量都经过代理，而发出流量的软件本身并不知道代理的存在。但网上大多配置教程都以iptables为主，由于本人用的是nftables，就尝试依葫芦画瓢搞了一个，同时也大概弄清除了其中的原理，供参考。</p><a id="more"></a><p>首先要准备一个透明代理客户端，如ss_redir，在PROXY_PORT进行监听。然后针对TCP和UDP设置不同的规则。</p><hr><h2 id="tcp部分"><a class="markdownIt-Anchor" href="#tcp部分"></a> TCP部分</h2><p>TCP是比较容易进行转发的，只需要在nftables里面进行设置forward就行了。<br>为了让配置文件看起来更直观，首先将需要绕过不走代理的ip（本地地址、远程代理服务器的地址等）放到一个文件里，这里以/etc/whitelist.ips为例子，文件结构如下所示。</p><p>PS:这里非常重要，必须配置对，否则会形成环路循环转发</p><p><code>/etc/whitelist.ips</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">define whitelist = &#123;</span><br><span class="line">    127.0.0.1/24,</span><br><span class="line">    192.168.0.0/16,</span><br><span class="line">    .....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意这里不要出现有交集的ip区间，否则会报错。</p><p>然后开始编辑nftables的配置文件（使用<code>nft</code>命令时，当priority为负值时会出错，遇到这种情况时需要直接编辑/etc/nftables.conf以后使用<code>nft flush ruleset &amp;&amp; nft -f /etc/nftables.conf</code>导入配置文件。</p><p>首先在配置文件开头插入这一句，导入白名单文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include &quot;/etc/whitelist.ips&quot;</span><br></pre></td></tr></table></figure><p>然后对应iptables的nat表，配置文件添加如下的一个nat表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">table ip nat &#123;</span><br><span class="line">    set whitelistset &#123;</span><br><span class="line">        type ipv4_addr</span><br><span class="line">        flag interval</span><br><span class="line">        elements = $whitelist</span><br><span class="line">    &#125;</span><br><span class="line">    chain proxy &#123;</span><br><span class="line">        ip daddr @whitelist return</span><br><span class="line">        ip protocol tcp redirect to :[PROXY_PORT]</span><br><span class="line">    &#125;</span><br><span class="line">    chain output &#123;</span><br><span class="line">        type nat hook output priority filter; policy accept;</span><br><span class="line">        jump proxy</span><br><span class="line">    &#125;</span><br><span class="line">    chain prerouting &#123;</span><br><span class="line">        type nat hook output prerouting priority dstnat; policy accept;</span><br><span class="line">        jump proxy</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的PROXY_PORT换成你实际的透明代理的端口，可以看到这样会将这台机器上产生的流量（由output链控制）和经过这台机器路由的流量（比如这台机器是路由器，由prerouting链控制）转发到本地的PROXY_PORT端口。<br>在linux中，代理程序可以通过调用一些内核提供的API来获取TCP包转发前的目的地址和端口，这样的话直接转发给透明代理就可以很好的处理。但是UDP不能这样做，内核并不允许获取原来的这些信息。所以对于UDP，我们就需要用到另外一种方法。</p><hr><h2 id="udp部分"><a class="markdownIt-Anchor" href="#udp部分"></a> UDP部分</h2><p>UDP的透明代理，需要借助一个内核模块，叫做TPROXY，他可以在不改变数据包的目的地址的情况下进行路由转发，nftables中可以调用这个模块，在很多iptables配置的文章中也已经介绍过，这里不再展开做介绍。<br>同样的，编辑/etc/nftables.conf，对应iptables中的mangle表，添加如下配置的一个表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">table ip mangle&#123;</span><br><span class="line">    set whitelistset &#123;</span><br><span class="line">        type ipv4_addr</span><br><span class="line">        flags interval</span><br><span class="line">        elements = $whitelist</span><br><span class="line">    &#125;</span><br><span class="line">    chain output &#123;</span><br><span class="line">        type route hook output priority mangle;policy accept;</span><br><span class="line">        ip daddr @whitelistset return</span><br><span class="line">        ip protocol udp mark set 0x233</span><br><span class="line">    &#125;</span><br><span class="line">    chain prerouting &#123;</span><br><span class="line">        type filter hook prerouting priority mangle; policy accept;</span><br><span class="line">        ip daddr @whitelistset return</span><br><span class="line">        ip protocol udp tproxy to 127.0.0.1:PROXY_PORT</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面我们做的，在mangle表中创建了两条链，output链的type为route，这里的route就是对应了iptables的mangle表，但是route type只能hook output点，所以prerouting链的type就变成了filter。<br>由于TPROXY只能在prerouting链处理，在nftables的流向图中（文后附），output链之后，还跟了一个reroute的流程，要触发这个reroute，我们就需要给数据包头部打上标签（任意一个数值，这里是0x233）。这样在reroute阶段，系统会检测到数据包的头部发生了改变，于是数据包被打到prerouting的地方重新进行路由。<br>而在prerouting阶段，被reroute的数据包和经过本机路由的数据包一起，如过目的地址不在白名单中，就tproxy打到透明代理去。整个过程非常清晰明了。</p><p>PS：在网上的许多教程中，都提到需要进行这样的两条操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ip rule add fwmark 0x233 lookup 100</span><br><span class="line">ip route add local 0.0.0.0/0 dev lo table 100</span><br></pre></td></tr></table></figure><p>其作用是将标记为0x233，并且目标为本地地址的数据包经过回环网口送出，但是经过本人实际测试，加和不加并没有什么区别，我认为即使不配置，默认情况系统也应该已经能够知道这条规则，所以并不需要添加。如果有不对的地方，希望读者不吝赐教。</p><img src="/2019/08/19/tproxy-config-with-nftables/nf-packet-flow.svg" title="附nftables流向图">]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代理 </tag>
            
            <tag> nftables </tag>
            
            <tag> 防火墙 </tag>
            
            <tag> 路由 </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客重建</title>
      <link href="/2019/08/19/blog_revive/"/>
      <url>/2019/08/19/blog_revive/</url>
      
        <content type="html"><![CDATA[<p>今天，失踪以久的博客终于恢复了，之前一直托管在<a href="https://www.hostker.com" target="_blank" rel="noopener">Hostker</a>上面，后面忘记付费，在<em>没有备份</em>的情况下站点全被删了。。。<br>痛定思痛，还好部分文章还有写作时的md文档，有时间再搬上来。。现在一鼓作气直接使用hexo迁移到github上了，避免了被删库的烦恼。</p><p>以上</p>]]></content>
      
      
      <categories>
          
          <category> 公告 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《塞尔达传说 旷野之息》：一次有趣而难忘的冒险之旅</title>
      <link href="/2019/02/12/archive/%E3%80%8A%E5%A1%9E%E5%B0%94%E8%BE%BE%E4%BC%A0%E8%AF%B4%20%E6%97%B7%E9%87%8E%E4%B9%8B%E6%81%AF%E3%80%8B%EF%BC%9A%E4%B8%80%E6%AC%A1%E6%9C%89%E8%B6%A3%E8%80%8C%E9%9A%BE%E5%BF%98%E7%9A%84%E5%86%92%E9%99%A9%E4%B9%8B%E6%97%85/"/>
      <url>/2019/02/12/archive/%E3%80%8A%E5%A1%9E%E5%B0%94%E8%BE%BE%E4%BC%A0%E8%AF%B4%20%E6%97%B7%E9%87%8E%E4%B9%8B%E6%81%AF%E3%80%8B%EF%BC%9A%E4%B8%80%E6%AC%A1%E6%9C%89%E8%B6%A3%E8%80%8C%E9%9A%BE%E5%BF%98%E7%9A%84%E5%86%92%E9%99%A9%E4%B9%8B%E6%97%85/</url>
      
        <content type="html"><![CDATA[<p><img src="/attachment/img/breath_of_the_wild.jpg%22" alt="旷野之息"><br>就在前不久，我刚刚结束了陆陆续续陪伴我一个多月的《塞尔达传说 旷野之息》。<br>在最终击败盖侬的那一刻，那种突然完成了使命的感觉，我很久没有体验过了。</p><h2 id="早期接触"><a class="markdownIt-Anchor" href="#早期接触"></a> 早期接触</h2><p>塞尔达这个系列，我在之前只是略有耳闻。我第一次接触《旷野之息》是当switch和这一作首发的时候，那个时候我的资讯流突然就被塞尔达刷屏了。<br>仿佛周围的人都在玩塞尔达（并没有），各种游戏玩家都在说塞尔达是怎样的神作。如今如果你在网络上搜索关键词“塞尔达”，你会看到各种塞尔达的安利文。<br>我当时虽然有玩这作的冲动，但是苦于没有switch，只能“望游兴叹”。</p><h2 id="体验和亮点"><a class="markdownIt-Anchor" href="#体验和亮点"></a> 体验和亮点</h2><p>直到去年双11,我才在狗东入手了一台swtich，当然，第一件事就是买《旷野之息》来玩。<br>说实话，我很久没有这样有动力玩一款RPG了，两年前在PC上买的《巫师3》，玩到20多级以后就再也没碰过，原因是我在游玩过程中，经常会遇到，为了钱或者是装备，必须要去做我不想去做的事。<br>当我想一心一意推主线的时候，我会发现，我的等级不够/我的钱不够/装备不好，甚至最绝望的是，装备坏了都没钱修……<br>这些事情，都极大的阻碍了我的游戏体验，虽然《巫师3》同样也是开放世界，并且似乎看起来，这个世界比塞尔达的还要大和真实。但是由于这些方面的缺失，所以很难让人有肝下去的欲望。（至少我是这样的）</p><p>《旷野之息》在这些方面处理的非常好，首先他不是采用传统的等级机制来限制玩家，装备也没有“修理”这个选项。所有武器都有耐久。这样就既保证了玩家不再受到经验值的束缚，能做什么事完全取决于自身水平，林克的成长也是玩家自己的成长。<br>让玩家随着游戏人物一起成长，玩家就更乐意去做一些能够提升他自己的事情。其次，里面采用到的引力法则和“三角形法则”可以看到，任天堂真的在游戏性上，下足了功夫，游戏里的每一座山，每一颗树，都不是随随便便就加上的，除了考虑观感的同时，还要对玩家的行为作出预测，利用不同的对象去引导玩家。</p><p>《旷野之息》还有一个非常巧妙的地方，还在于物理和化学引擎的使用。什么是化学引擎，这个是任天堂这次提出的一个新概念，对应物理引擎。<br>所谓物理引擎就是“计算物体的<strong>行为</strong>的引擎”。而化学引擎，则是“计算物体的<strong>状态</strong>的引擎”。</p><p><img src="/attachment/img/zelda_engine.png%22" alt="引擎介绍"></p><p>这跟我们认识的物理和化学上面当然就有一些出入。<br>比如游戏中的电流和扇出来的风，这些本来应该是物理引擎处理的东西，但是实际处理的却是化学引擎。<br>当然，游戏本身就是应该对真实世界的抽象简化再处理后得到的产物，所以根据上面的对引擎的定义就不难理解，为什么本来应该是物理引擎处理的事，却变成了化学引擎来做。<br>有了物理和化学引擎的加持还不够，目前大量游戏都在使用Havok这个物理引擎，但是只有《旷野之息》将物理引擎融入了游戏的玩法本身。</p><h2 id="不足与缺憾"><a class="markdownIt-Anchor" href="#不足与缺憾"></a> 不足与缺憾</h2><p>说了这么多《旷野之息》做的好的地方，我也要说说他给我的体验带来的缺憾之处。</p><p>首先就是对于NPC行为的处理，NPC的行为过于单一，甚至不如里面的怪物的行为丰富，所以有时候觉得很出戏。<br>还记得有一对在寻找静谧公主的情侣，当我把静谧公主放到他们面前的时候，和他们对话的内容仍然是感叹静谧公主难寻。<br>同样的事情发生在一队找生命松露的姐妹身上。这在游玩过程中，造成了不少的阻碍。<br>不少人在玩《旷野之息》的时候，会感受到一种孤独感，我想这可能就是因为NPC的对话并不会随着玩家的行为改变的原因。<br>任天堂不知道有没有试过将物理和化学引擎同样运用到NPC上，我想，这可能会带来一番新的体验。</p><p>其次还有一些各种各样的小问题，比如没有充分利用到Switch的机能啦，剧情有些不够自然导致救公主的欲望较低啦之类的。<br>当然这些小问题都是有其存在的原因，比如要考虑到这之前是一款wiiu上的游戏，然后也是要以游戏性为最高优先级。<br>在这里指出批评一番的话，颇有些鸡蛋里挑骨头的意味。所以在此就不多做评论。</p><p>在最后，不管这款游戏有怎样的小毛病，也不得不承认其对于开放世界的贡献和其神作的地位。<br>希望以后，能有更多像《旷野之息》这样的大作诞生！�样的大作诞生！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>存储器的层次结构</title>
      <link href="/2019/01/30/archive/%E5%AD%98%E5%82%A8%E5%99%A8%E7%9A%84%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84/"/>
      <url>/2019/01/30/archive/%E5%AD%98%E5%82%A8%E5%99%A8%E7%9A%84%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>编写程序的时候，性能优化的瓶颈不是往往不是在与计算量，而是I/O时间的开销。要能够更好的优化程序，就必须得了解一些存储器层次知识。</p><p>我们编写程序，直接打交道的存储器就是寄存器和内存，有时还会加上硬盘。但其实，在计算机内部，缓存的作用也是不容小视的。内部计算机中的存储器容量越大，单位成本越便宜，但是相应的速度也就越慢，一台现代计算机拥有的存储器从CPU访问的速度由快到慢排序大致有以下几个部分：寄存器、CPU中的L1L2L3缓存（SRAM）、内存（DRAM）、固态硬盘、机械硬盘。在硬盘内部为了提升速度，也带有一定大小的缓存。可见，缓存无处不在，我们只有利用好缓存，才能够有效缩短I/O时间。</p><p>考虑这两个不同计算二维数组元素和的函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">sum1</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n, <span class="keyword">int</span> <span class="built_in">array</span>[m][n])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">long</span> <span class="keyword">long</span> ret = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; m;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; n;j++)</span><br><span class="line">    &#123;</span><br><span class="line">      ret += <span class="built_in">array</span>[i][j];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">sum2</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n, <span class="keyword">int</span> <span class="built_in">array</span>[m][n])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">long</span> <span class="keyword">long</span> ret = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; n;j++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">      ret += <span class="built_in">array</span>[i][j];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>乍一看，这两个函数似乎没有什么区别，但其实，在m和n足够大的情况下，sum1的运行速度要比sum2要快很多。这就是缓存的作用，在sum1中，我们对array的访问基本上顺序的，由于array在内存中是顺序存储的，所以我们访问内存的时候，也是顺序访问。而内存访问一次需要花费不少时钟周期，所以缓存会一次读取内存中接下来的部分，在下面的访问中，省去了每次都要访问内存的时间。然而，由于我们的缓存不是无限大的，后面加载的值会覆盖掉前面的值，在sum2里，因为我们不是顺序的访问内存，所以在m和n够大的情况下，我们基本上无法从缓存里拿到我们想要的值。这就导致了sum1和sum2的运行效率有着决定性的差距。在编写程序时，我们也要利用这一点，写出带有所谓“空间局部性”的程序，尽量顺序访问内存，可以使运行速度提升不少。</p><p>除了“空间局部性”以外，还有一个对于程序运行速度关系很大的性质——“时间局部性”，所谓时间局部性，就是把对于同一块内存的访问，尽量集中到一个时间内，这样可以有效的利用这块内存被预读到缓存的性质，提高I/O效率。具体的举例由于需要针对不同类型的缓存才能看出效果，在这里就不做展开了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>十分钟用Python创建一个Echo Server</title>
      <link href="/2018/12/04/archive/%E5%8D%81%E5%88%86%E9%92%9F%E7%94%A8Python%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAEcho%20Server/"/>
      <url>/2018/12/04/archive/%E5%8D%81%E5%88%86%E9%92%9F%E7%94%A8Python%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAEcho%20Server/</url>
      
        <content type="html"><![CDATA[<p>近日想玩一下网络编程方面，但是实在不想用C去写笨重的代码，于是就使用python写了一个简单的TCP Echo Server。代码很少，标题虽然写了十分钟，但是我自己磕磕碰碰还是折腾了一天（标题党了）</p><hr><h2 id="什么是echo-server"><a class="markdownIt-Anchor" href="#什么是echo-server"></a> 什么是Echo Server</h2><p>Echo Server一般是运行在7端口的一项服务，其一大特点就是会返回从客户端接收到的消息。（通俗来说就是复读机）</p><h2 id="echo-server能用来做什么"><a class="markdownIt-Anchor" href="#echo-server能用来做什么"></a> Echo Server能用来做什么</h2><p>Echo Server是最容易实现的网络服务之一，可以用来学习Socket编程的一些基本知识，还可以用来检测客户端与服务器之间的连通性，丢包率，连接速度和传输速度。</p><hr><h1 id="实现思路"><a class="markdownIt-Anchor" href="#实现思路"></a> 实现思路</h1><p>一开始我觉得应该挺容易的，快速的从网上找到了一些相关的代码，采用Ctrl C V大法，但是却发现有很多问题，最终还是自己动手才写出一个像样的东西。</p><p>首先第一步，我们得监听一个端口，调用python的socket模块，让其绑定在一个端口，监听TCP连接。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用IPV4和TCP连接，监听端口程序</span></span><br><span class="line">tcpSocket = socket.Socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">tcpSocket.bind((HOST, PORT))</span><br></pre></td></tr></table></figure><p>第二步，我们检测是否有客户端连接上，如果连接上了，就将对这个客户的处理逻辑单独放到一个线程里跑(这是坑最多的一部，看了网上很多代码，要么就是直接一个线程，无法处理多客户，要么就是所有客户端共用一个处理线程，当数据量较大时就会出现问题)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">  clientSocket, clientAddr = tcpSocket.accept()</span><br><span class="line">  t = threading.Thread(target = handle, args = (clientSocket, clientAddr), daemon = <span class="literal">True</span>)</span><br><span class="line">  t.start()</span><br></pre></td></tr></table></figure><p>最后我们只要在线程处理逻辑中，编写相关的回显逻辑，就可以了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">  data = clientSocket.recv(BUFSIZE)</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  clientSocket.send(data)</span><br><span class="line">clientSocket.close()</span><br></pre></td></tr></table></figure><p>当然上面为了演示，对实际代码做了很多精简，完整的代码在下面（需要科学上网）:</p><p><a href="https://gist.github.com/Koswu/f813aaf201212310733829b27c7db384" target="_blank" rel="noopener">服务端</a><br><a href="https://gist.github.com/Koswu/470cf2cfe924321cc7c10419f722157f" target="_blank" rel="noopener">客户端</a><br>(客户端为一个类似nc的小程序)</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>哈希表的优势和实现</title>
      <link href="/2018/08/24/archive/%E5%93%88%E5%B8%8C%E8%A1%A8%E7%9A%84%E4%BC%98%E5%8A%BF%E5%92%8C%E5%AE%9E%E7%8E%B0/"/>
      <url>/2018/08/24/archive/%E5%93%88%E5%B8%8C%E8%A1%A8%E7%9A%84%E4%BC%98%E5%8A%BF%E5%92%8C%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>在对二叉树进行学习之后，相信每个人都会对于其精妙和最坏情况下仍然能保证线性对数级别时间复杂度的增删改查赞叹不已。其用来实现符号表（存储键值对）是一种较为高效的实现。</p><p>在没有学习哈希表之前，如果我告诉你，有一种数据结构，可以对键值对做到常数时间级别的增删改查，你一定不会相信。但是哈希表做到了，有这么高效的数据结构怎么能够不对其有了解呢？这次我们就来谈谈哈希表这种数据结构的魅力所在。</p><p>要了解哈希表，首先我们得来看一看这个哈希函数是什么东西。函数，其实就是一个映射，将所有在定义域的值映射到值域范围内。有时候我们需要对任意长度的信息，提取出信息的“指纹”，这个指纹在一定程度上反映了信息的内容，但是占用空间大大缩小。此时我们就要设计一个函数，其定义域为信息可能出现的所有空间，而值域则为需要”指纹”的大小。当这个函数可以用来完成上述用途时，这个函数就被称为哈希函数，哈希函数输出的结果被称为哈系值。一些著名的哈希函数有MD5、SHA-1、SHA-2等。</p><p>有了哈希函数，我们就可以利用哈希函数的映射，将任意长度的键映射到一个合理的区间内。试想创建一个数组，数组的下标为键的哈希值。数组的内容即为键值对的值，当我们已知键，要对值进行查找时，只需要对键取哈希，就可以在常数时间内获取到值的内容。</p><p>在哈希表的实现中，我们设计的哈希函数应该考虑的重点有如下几个</p><ol><li>尽可能让输入中的每一位都对输出结果造成影响，减少碰撞的发生</li><li>计算尽量简单，否则哈希函数的计算也会对运行时间造成极大的影响</li><li>输出范围应当尽可能的可控</li></ol><p>因为2的原因，我们不得不抛弃MD5和SHA这些著名的哈希函数，并且这些函数也很难自己控制输出的数据范围。哈希函数的好坏，决定了哈希表的效率。当然，实现哈希函数的方法不止一种，这里介绍比较常用的一种方法——除留余数法。</p><p>这里其实可以采用一种简单的运算来实现这个哈希函数——模运算。相信学过一点编程语言的朋友都知道，对某个数取模就是除以某个数求余数。假设我们需要0-97的哈希范围，无论多大的数，只需要对97取模，就可以获得一个在0-97之间的数，但是要注意，当我们采用的基数不是素数时，就会导致输出仅仅依赖于输入的后几位数，不满足1的情况发生。所以在使用这种方法作为哈希函数的过程中，应当选择合适的基数。</p><p>当我们有了哈系函数以后，就可以利用哈希函数类构造哈希表了。首先创建一个很大的数组array，数组的大小即为哈希函数的值域范围，然后在插入键值对时，直接使用array[hash(key)] = value的方式给数组赋值，当需要已知键，想要取出值的时候，同样采用array[hash(key)]即可。</p><p>下面我对哈希表的实现，供参考：</p><hr><h3 id="哈希碰撞的解决方法"><a class="markdownIt-Anchor" href="#哈希碰撞的解决方法"></a> 哈希碰撞的解决方法</h3><p>读到这里，你可能已经发现了，哈希函数由于对信息进行了缩短，所以导致了有可能出现碰撞的存在，这就好像出现了两个名字一样的“张三”，当我们说，张三坐在某某位置上时，并不知道到底是哪个张三真正坐在位置上。这里有两种解决方案：拉链法和线性探测法</p><p>拉链法是将具有相同哈希值的函数放到一个链表里（整个哈希表呈现为一个链表的数组），用一个链表的数组来存放所有键值对。这种方法在最坏情况（哈希函数的返回值始终为常数）下会退化成链表。</p><p>而线性探测法则是采用两个数组，一个放键，一个放值，当即将保存的位置已经保存有数据的时候，从该位置开始往下遍历，直到遇到一个空的位置进行插入。这种方法在最坏情况下会退化成为数组。</p><p>两种方案对比，很难说哪种就一定跟高效，具体的实现中应当使用哪一种应该很据不同需求选取。</p><p>下面分别是线性探测和拉链法的哈希表实现</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Key, <span class="keyword">typename</span> Value&gt; <span class="class"><span class="keyword">class</span> <span class="title">LinearProbingHashST</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="keyword">size_t</span> size_;</span><br><span class="line">  <span class="keyword">size_t</span> pair_counts_ = <span class="number">0</span>;</span><br><span class="line">  Key *key_arr_ ;</span><br><span class="line">  Value *value_arr_;</span><br><span class="line">  <span class="keyword">size_t</span> gethash_(Key k);</span><br><span class="line">  <span class="function">Value <span class="title">get_</span> <span class="params">(Key k, <span class="keyword">size_t</span> index)</span></span>;</span><br><span class="line">  <span class="function">Value <span class="title">put_</span> <span class="params">(Key k, Value val, <span class="keyword">size_t</span> index)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">LinearProbingHashST_</span><span class="params">(<span class="keyword">size_t</span> size)</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  LinearProbingHashST (<span class="keyword">size_t</span> size);</span><br><span class="line">  LinearProbingHashST ();</span><br><span class="line">  <span class="keyword">virtual</span> ~LinearProbingHashST ();</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">put</span><span class="params">(Key k, Value val)</span></span>;</span><br><span class="line">  <span class="function">Value <span class="title">get</span><span class="params">(Key k)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">erase</span><span class="params">(Key k)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Key, <span class="keyword">typename</span> Value&gt;</span><br><span class="line"><span class="keyword">size_t</span> LinearProbingHashST&lt;Key, Value&gt;::</span><br><span class="line">gethash_(Key k)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> ( <span class="keyword">int</span>(k) &amp; <span class="number">0x7FFFFFFF</span> )% size_;</span><br><span class="line">  <span class="comment">//return 1;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Key, <span class="keyword">typename</span> Value&gt;</span><br><span class="line"><span class="keyword">void</span> LinearProbingHashST&lt;Key, Value&gt;::</span><br><span class="line">LinearProbingHashST_(<span class="keyword">size_t</span> size)</span><br><span class="line">&#123;</span><br><span class="line">  size_ = size;</span><br><span class="line">  key_arr_ = <span class="keyword">new</span> Key[size_];</span><br><span class="line">  value_arr_ = <span class="keyword">new</span> Value[size_]();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Key, <span class="keyword">typename</span> Value&gt;</span><br><span class="line">LinearProbingHashST&lt;Key, Value&gt;::</span><br><span class="line">LinearProbingHashST(<span class="keyword">size_t</span> size)</span><br><span class="line">&#123;</span><br><span class="line">  LinearProbingHashST_(size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Key, <span class="keyword">typename</span> Value&gt;</span><br><span class="line">LinearProbingHashST&lt;Key, Value&gt;::</span><br><span class="line">LinearProbingHashST()</span><br><span class="line">&#123;</span><br><span class="line">  LinearProbingHashST_(<span class="number">997</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Key, <span class="keyword">typename</span> Value&gt;</span><br><span class="line">LinearProbingHashST&lt;Key, Value&gt;::</span><br><span class="line">~LinearProbingHashST()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">delete</span>[] key_arr_;</span><br><span class="line">  <span class="keyword">delete</span>[] value_arr_;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Key, <span class="keyword">typename</span> Value&gt;</span><br><span class="line"><span class="keyword">void</span> LinearProbingHashST&lt;Key, Value&gt;::</span><br><span class="line">put(Key k, Value val)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (pair_counts_+<span class="number">1</span> &gt;= size_)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">size_t</span> i;</span><br><span class="line">  <span class="keyword">for</span> (i = gethash_(k);key_arr_[i] != k;i = (i+<span class="number">1</span>) % size_)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (key_arr_[i] == (Key)<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      key_arr_[i] = k;</span><br><span class="line">      pair_counts_++;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  value_arr_[i] = val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Key, <span class="keyword">typename</span> Value&gt;</span><br><span class="line">Value LinearProbingHashST&lt;Key, Value&gt;::</span><br><span class="line">get(Key k)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">size_t</span> i = gethash_(k);key_arr_[i] != (Key) <span class="literal">NULL</span>;i = (i+<span class="number">1</span>) % size_)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (key_arr_[i] == k)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> value_arr_[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (Value) <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Key, <span class="keyword">typename</span> Value&gt;</span><br><span class="line"><span class="keyword">void</span> LinearProbingHashST&lt;Key, Value&gt;::</span><br><span class="line">erase(Key k)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">size_t</span> i = gethash_(k);key_arr_[i] != (Key) <span class="literal">NULL</span>;i = (i + <span class="number">1</span>) % size_)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (key_arr_[i] == k)</span><br><span class="line">    &#123;</span><br><span class="line">      key_arr_[i] = (Key) <span class="literal">NULL</span>;</span><br><span class="line">      value_arr_[i] = (Value) <span class="literal">NULL</span>;</span><br><span class="line">      pair_counts_--;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">size_t</span> j = i+<span class="number">1</span>;key_arr_[j] != (Key) <span class="literal">NULL</span>;j = (j+<span class="number">1</span>) % size_)</span><br><span class="line">      &#123;</span><br><span class="line">        Key temp_k = key_arr_[j];</span><br><span class="line">        Value temp_val = value_arr_[j];</span><br><span class="line">        key_arr_[j] = (Key) <span class="literal">NULL</span>;</span><br><span class="line">        value_arr_[j] = (Key)<span class="literal">NULL</span>;</span><br><span class="line">        pair_counts_--;</span><br><span class="line">        put(temp_k, temp_val);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Key, <span class="keyword">typename</span> Value&gt;</span><br><span class="line"><span class="keyword">bool</span> LinearProbingHashST&lt;Key, Value&gt;::</span><br><span class="line">empty()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> pair_counts_ == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Key, <span class="keyword">typename</span> Value&gt;<span class="class"><span class="keyword">class</span> <span class="title">SequentialSearchST</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="comment">//节点</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">    Key key;</span><br><span class="line">    Value value;</span><br><span class="line">    Node *next;</span><br><span class="line">    Node (Key k,Value v,Node *n):key(k),value(v),next(n)&#123;&#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">  Node *head_ = <span class="literal">nullptr</span>;</span><br><span class="line">  <span class="function">Node *<span class="title">erase_</span><span class="params">(Node *node, Key k)</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  SequentialSearchST() = <span class="keyword">default</span>;</span><br><span class="line">  <span class="comment">//获取对应键的键值</span></span><br><span class="line">  <span class="function">Value <span class="title">get</span><span class="params">(Key k)</span></span>;</span><br><span class="line">  <span class="comment">//设置指定键的键值，如没有，创建一个新键</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">put</span><span class="params">(Key k, Value val)</span></span>;</span><br><span class="line">  <span class="comment">//返回符号表存的元素个数</span></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">erase</span><span class="params">(Key k)</span></span>;</span><br><span class="line">  <span class="keyword">virtual</span> ~SequentialSearchST();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Key, <span class="keyword">typename</span> Value&gt;</span><br><span class="line"><span class="keyword">typename</span> SequentialSearchST&lt;Key, Value&gt;::Node*</span><br><span class="line">SequentialSearchST&lt;Key,Value&gt;::erase_(Node *node, Key k)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (node == <span class="literal">nullptr</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (node-&gt;key == k)</span><br><span class="line">  &#123;</span><br><span class="line">    Node *next_node = node-&gt;next;</span><br><span class="line">    <span class="keyword">delete</span> node;</span><br><span class="line">    <span class="keyword">return</span> next_node;</span><br><span class="line">  &#125;</span><br><span class="line">  node-&gt;next = erase_(node-&gt;next, k);</span><br><span class="line">  <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Key, <span class="keyword">typename</span> Value&gt;</span><br><span class="line">Value SequentialSearchST&lt;Key,Value&gt;::get(Key k)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">for</span> (Node *it = head_; it != <span class="literal">nullptr</span>; it = it-&gt;next)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (k == it-&gt;key)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> it-&gt;value;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (Value)<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Key, <span class="keyword">typename</span> Value&gt;</span><br><span class="line"><span class="keyword">void</span> SequentialSearchST&lt;Key,Value&gt;::put(Key k, Value val)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">for</span> (Node *it = <span class="keyword">this</span>-&gt;head_; it!= <span class="literal">nullptr</span>; it = it-&gt;next)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (k == it-&gt;key)</span><br><span class="line">    &#123;</span><br><span class="line">      it-&gt;value = val ;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  head_ = <span class="keyword">new</span> Node(k, val, head_);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Key, <span class="keyword">typename</span> Value&gt;</span><br><span class="line"><span class="keyword">int</span> SequentialSearchST&lt;Key,Value&gt;::size()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(Node *it = head_;it != <span class="literal">nullptr</span>;it = it-&gt;next)</span><br><span class="line">  &#123;</span><br><span class="line">    count++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Key, <span class="keyword">typename</span> Value&gt;</span><br><span class="line">SequentialSearchST&lt;Key,Value&gt;::~SequentialSearchST()</span><br><span class="line">&#123;</span><br><span class="line">  Node *it = head_;</span><br><span class="line">  <span class="keyword">while</span> (it != <span class="literal">nullptr</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    Node *del_node = it;</span><br><span class="line">    it = it-&gt;next;</span><br><span class="line">    <span class="keyword">delete</span> del_node;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Key, <span class="keyword">typename</span> Value&gt;</span><br><span class="line"><span class="keyword">bool</span> SequentialSearchST&lt;Key,Value&gt;::empty()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> head_ == <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Key, <span class="keyword">typename</span> Value&gt;</span><br><span class="line"><span class="keyword">void</span> SequentialSearchST&lt;Key,Value&gt;::erase(Key k)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (head_ == <span class="literal">nullptr</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  head_ = erase_(head_, k);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>关于纳什均衡的一点想法——由弹丸论破想到的</title>
      <link href="/2018/08/21/archive/%E5%85%B3%E4%BA%8E%E7%BA%B3%E4%BB%80%E5%9D%87%E8%A1%A1%E7%9A%84%E4%B8%80%E7%82%B9%E6%83%B3%E6%B3%95%E2%80%94%E2%80%94%E7%94%B1%E5%BC%B9%E4%B8%B8%E8%AE%BA%E7%A0%B4%E6%83%B3%E5%88%B0%E7%9A%84/"/>
      <url>/2018/08/21/archive/%E5%85%B3%E4%BA%8E%E7%BA%B3%E4%BB%80%E5%9D%87%E8%A1%A1%E7%9A%84%E4%B8%80%E7%82%B9%E6%83%B3%E6%B3%95%E2%80%94%E2%80%94%E7%94%B1%E5%BC%B9%E4%B8%B8%E8%AE%BA%E7%A0%B4%E6%83%B3%E5%88%B0%E7%9A%84/</url>
      
        <content type="html"><![CDATA[<blockquote><p>现实中很多东西都可以看成一场博弈，但很多时候并没有那么理想化罢了，</p></blockquote><p>最近咸鱼了一把， 把PSV翻出来，稍微玩了一下《弹丸论破》系列的最新作《新弹丸论破V3:大家的自相残杀新学期》<br><img src="https://commons.moegirl.org/thumb.php?f=New_Danganronpa_V3_Mainvisual1.jpg&amp;width=400" alt="弹丸论破"></p><p><em>弹丸论破V3的宣传图</em></p><a id="more"></a><p>作为一个经久不衰的IP，这个系列在推理游戏界也算是有一席之地了（先不提这玩意儿的动画），通过把各种游戏类型混合到一起，也算是开创出了一种独特的玩法。（笑）</p><p>弹丸论破正传系列虽然剧情不同，但是核心内容都是一样的，就是反派要求主角一行自相残杀，并且虽然全体合作是最优解，但是只有一方合作的情景下，合作者又会受到惩罚。这似乎有点囚徒困境的意思，但是又跟囚徒困境有所不同。</p><p>当然，剧情中的所谓“自相残杀”的内容远远不能只用某种理想化模型来解释（否则小高和刚也不用做了），完整的对于游戏剧情本身的博弈类型的讨论已经超出本文的内容范围，在这种例子中，虽然很多事情可以看做是一场博弈，但是要能够在各种错综复杂的关系中找出博弈模型，确实一件很困难的事情。例如就现实中囚徒招供来说，由于囚徒还要考虑后续的打击报复等等因素，所以很难出现囚徒困境那种局面。</p><p>这次我主要想谈一谈的内容还是有关静态和动态博弈中出现多个纳什均衡解的事情。考虑如下情景，两个人隔着一堵墙被分别关在两间房屋里，每个人都带着不可拆卸的致死型电击器，房间中有一个按钮，分别控制对方的电击器。按下按钮后实时放电（动态）和等一段时间后再放电（静态）</p><p><img src="https://blog.koswu.com/attachment/img/dilemma.jpg" alt="困境"></p><p><em>另一种困境（图很丑，见谅）</em></p><p>现在问题在于，两个人怎样的策略才能达到最优呢。我们先来看一看这个情景的支付矩阵</p><p>||支付矩阵||<br>|  :–: | :–: | | :–: |<br>| (A,B) | A合作 | A不合作 |<br>| B合作 | (0, 0) | (0, -10) |<br>| B不合作 | (-10 , 0) |  (-10, -10) |</p><p>可以看到，每个人无论是否选择合作还是不合作，对于自己没有任何影响，只是对于对方有影响。无论哪一种结果，都是纳什均衡解。在静态情景下，由于两个人可以通过交涉，来消除对方的疑虑，由于自己选择不合作并没有任何好处，所以在这种情况下，双方更容易趋向于合作。</p><p>但是在动态情景下，形势最大的逆转了，由于提前按下按钮可以让对方立即死亡，从而间接避免自己的死亡，也就是说，两个人同时不合作这一种情况基本消失了的时候，此时两个人更可能趋向于用最快的速度按下按钮，最终达到你死我活的局面。</p><p>可见，虽然是博弈，但是也存在对于博弈论来说无能为力的情景。当存在多个解都是纳什均衡解的时候，能不能达到帕累托最优状态，人与人之间的“沟通”，以及动态和静态博弈的影响，就会显得无比重要。</p><p>以上均为本人的一点鄙见，如有不妥之处敬请指教</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>GEB读后感</title>
      <link href="/2018/05/15/archive/GEB%E8%AF%BB%E5%90%8E%E6%84%9F/"/>
      <url>/2018/05/15/archive/GEB%E8%AF%BB%E5%90%8E%E6%84%9F/</url>
      
        <content type="html"><![CDATA[<p>最近花了一个多月的零碎时间了读这部著作，读毕，有醍醐灌顶之势。遂记拙文一篇，以表观感。</p><p>当我看到这本书的时候，一种很怪异的心情了浮上来。巴赫、埃舍尔、哥德尔，这三个看似风牛马不相及的人物怎么能写到一本书里？并且还是一本讲人工智能的书籍里面。这本书从一个简单的形式系统逐渐深入，并且提出了许多这三个人之间的联系，虽然我觉得很多也许是作者某种意义上故意设置的同构，但是这样一种解释方式也让我对这三个人、甚至是这三门学科——音乐、美术、数学，有了新的看法。</p><p>鉴于这本书的精妙之处，我难以一一解读，就谈谈我认为的这本书最令人深刻的问题吧。那就是——什么是智能？</p><p>在写这本书的年代，人工智能对于现实生活的影响远远没有现在那么高，那个时代，国际象棋和围棋还是机器不能战胜人类的领域。但是作者已经有了如此詹前的想法，可谓一奇也。有人说机器永远不可能拥有智能，因为他只能计算。但是人的神经元也是符合各种各样的物理规则的，神经元也只能按照固定的模式运行。书中提到的一点，就是由一个无智能的复杂系统可能表现出智能。我认为不但是一个无智能的系统，即使是一个智能的系统，也会表示出一定的智能性，因为具有智能的团体，在一定程度上是可以通过将个体的智能退化而获得上层智能的。《乌合之众》中曾经这样描述过 ：“群体的行为总是表现为排斥异议、极端化、情绪化和低智商。”这也许是当一个团体，表现出一定的意识所需要的，将个体的意识行为退化的一种表现。</p><p>举个例子，著名<s>过气老婆</s>歌姬“初音未来”，其本身是一个由创作者创作的一个虚拟形象，但是在其知名度提升之后，却能一呼百应，让众多的爱好者加入进来，创作大量的同人作品。在大家创作同人作品的时候，其实就是对这个本不存在的人物的一种形象补全，这个形象由于众多同人的加入逐渐变得丰满起来。<s>说好的初音平胸呢??</s>“初音未来”这个形象，从宏观来看，仿佛变得拥有了自己的意识一般，“初音未来”的演唱会，无论在哪里举办，都会有那么多人去捧场，这种现象有时候真的会让我们忘记了这个“初音未来”只是一个不具意识的创作形象罢了，是众多的粉丝和同人作者，赋予了这个形象以生命。<s>肥宅的老婆是由众肥宅的意识组成的???</s></p><p>有趣的是，这种赋予生命的现象并不一定需要这些意识的联系，只要一群有着共同目标的人就会产生这种现象。其在一部21世纪初的动画《攻壳机动队：Stand Alone Complex》中也有提到，荣格所描述的集体无意识似乎在这种时候展现了出来。</p><p>在不久之前，Google的Duplex在开发者大会上向我们展示了AI与人通话的场景，其对话自然的程度，让与其对话的人都没能识别出这是一个AI，在特定场景之下，人类已经区别不出AI个真实人类的区别。就我个人认为，AI的发展目前又进入了一个新的风口，其已经具备一定的“智能”，但是距离人类的智能水平还有不少差距。我们应当抛弃那种“人类沙文主义”的包袱，正确看待其发展，并使AI的进一步智能而努力！�还有不少差距。我们应当抛弃那种“人类沙文主义”的包袱，正确看待其发展，并使AI的进一步智能而努力！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>谈谈红黑树（一）</title>
      <link href="/2018/03/23/archive/%E8%B0%88%E8%B0%88%E7%BA%A2%E9%BB%91%E6%A0%91%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2018/03/23/archive/%E8%B0%88%E8%B0%88%E7%BA%A2%E9%BB%91%E6%A0%91%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>最近博客一直断更，一时想不到要写什么比较好。这次趁着刚刚学完红黑树的机会，就开篇文章谈谈红黑树吧。</p><p>相信稍微对于数据结构都些了解的人都了解过二叉搜索树，二叉搜索树的优点很明显，就是在树基本平衡的情况下（每个分支的深度都差不多）的情况下，对于树节点的增删改查在对数时间（O(lgN))内就能够完成。但是其缺点也很明显，就是必须要在 <strong>平衡</strong> 的情况下，才能有这么高的效率，如果树只向一个方向增长（最坏情况）的话，其效率就变得和线性表一样了，甚至还要低下。</p><p><img src="http://blog.koswu.com/attachment/img/balance_or_not_tree.png" alt="最优情况和最坏情况"></p><p>平衡二叉树和不平衡二叉树比较</p><p>于是，就有人想要发明一种能够在最坏情况下仍然拥有对数时间的效率的数据结构，“自平衡二叉查找树”便诞生了。英文名叫做&quot;Balanced tree&quot;,简称B树hhh。说这么多，估计各位心里仍然没有一点B树Orz。其实所谓平衡树，就是在插入，删除的时候，使用一些树的变换手段（一般是旋转），来使树达到平衡的数据结构，其本质仍然是一棵二叉搜索树。</p><p>最早提出的平衡树是AVL树，但是由于种种原因，其并未得到工业界的广泛使用，具体介绍由于篇幅限制这里就不展开了，有兴趣的读者可以自行搜索。目前工业界最为广泛使用的平衡树,便是本次要介绍的红黑树，但为了让我们更容易实现红黑树，我在此并不直接介绍红黑树，而是效率和红黑树差不多的一种变体——左倾红黑树。</p><p>在介绍红黑树之前，请让我先介绍一种和红黑树等价的数据结构：”2-3树”。这种树是有点像二叉搜索树，但是又有些不同，重点在于其有两种节点，一种节点和二叉树一样，有一个键和两条指向子节点的链接。另外一种就比较厉害了，他有两个键和三条链接，这三条链接分别指向：同时小于两个键的节点，大小在两个键之间的节点，以及同时大于两个键的节点。</p><p>当插入一个键的时候，首先对这个键进行搜索，按照二叉树的方法找到插入的位置，如果要插入的位置在一个2-节点，那就好办了，只要插入这个节点中合适的位置，让这个节点变成3-节点，这样做的话树的平衡性并没有改变。但如果插入的位置已经是一个3-节点的话，事情就变得有些棘手，我们必须在不改变树的平衡性的前提下完成插入操作。<br>我们可以首先将这个键插入3-节点，变成一个临时的4-节点，然后，沿着根的方向，依次分解遇到的4-节点。将4-节点中的处于中间大小的键放到他的父节点中。这样依次进行变换，一直到根节点，如果遇到根节点也变成了4-节点的情况，就可以直接将这个4-节点拆成三个2-节点，这样做的话，树的每条分支增长的速度就是一样的了，因为树由从上向下生长改为了 <em>从下向上</em> 生长。</p><p><img src="http://blog.koswu.com/attachment/img/110px-2-3-4_tree_2-node.png" alt="2-节点"><br><img src="http://blog.koswu.com/attachment/img/120px-2-3-4-tree_3-node.png" alt="3-节点"></p><p>2-节点和3-节点</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>谈谈红黑树（二）</title>
      <link href="/2018/03/23/archive/%E8%B0%88%E8%B0%88%E7%BA%A2%E9%BB%91%E6%A0%91%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2018/03/23/archive/%E8%B0%88%E8%B0%88%E7%BA%A2%E9%BB%91%E6%A0%91%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>了解了2- 3-树的插入操作后，便可以正式开始介绍左倾红黑树了。2-3 树好是好，但是由于其是用两种不同类型的节点构成的，实现起来不方便。我们可以用一个方法巧妙的替代2-3树中的3节点，就是用两个普通的2-节点，通过一种特殊的链接——红链接来连接起来，来表示一个3-节点。</p><p>当然，要表示出这个红链接，需要给每个节点加入一个额外的属性——颜色，红黑树中每个节点都是两种颜色中的一种——黑色和红色。节点的颜色表示指向该节点的链接颜色。根节点与其他节点不同，其始终为黑色。大家应当注意到，左倾红黑树的“左倾”意味着只能够存在向左的红连接，而不能存在向右的链接。</p><p>在红黑树中，为了在保证树的平衡性的同时，还能够保证红链接的合法性，我们采用一个balance函数，其调用rotate_left(左旋)和rotate_right(右旋)以及flip_color_black方法来实现这些变换。flip_color_black和flip_color_red的作用在于将一个子节点全为红色的节点染红，并将其子节点染黑，以及上述操作的反向。其实现已经在文后的代码中给出，这里不再细说。关于树的旋转变换，参见下图。</p><p><img src="https://blog.koswu.com/attachment/img/Tree_rotation.png" alt="树旋转"></p><p>树的插入操作和2-3树类似，首先找到插入位置，插入，然后沿查找路径向上依次执行balance方法（参见实现中的put方法）</p><p>再来说说删除最小键，可以在向左遍历的过程中，让红黑树暂时变得“不严谨”，也就是说，暂时允许等价的4-节点出现。并且需要做一个变换，保证当前查找的位置一定是3-节点或者是4-节点，这样当查找到底部的时候，就可以保证当前节点不是2-节点，实现中使用flip_color_red和树的旋转操作来实现，此时只需要直接从树中删去最小节点，然后沿着路径向上调用balance方法恢复树的性质。这里要注意的是，如有需要，我们可以临时改变根节点的颜色为红色，这样就能保证在变换中，父节点的颜色一定是红色。<br>删除最大键与最小键同理，但因为子节点在右边，需要做一些额外的变换，这里留给读者去思考，实现见代码。</p><p>现在遇到了最难的操作——删除指定键，但有了前面删除最大最小键的铺垫，问题也就迎刃而解了。与删除最大最小键时类似，沿着查找路径进行4-节点变换，当找到需要删除的键时，可以分为三种情况：</p><ul><li>没有子节点</li></ul><p>这种情况非常容易处理，由于可保证当前不是2-节点，直接删除该节点就行</p><ul><li>只有一边的子节点</li></ul><p>这种也比较简单，只需要将子节点接上原来的链接就行</p><ul><li>同时拥有左右节点</li></ul><p>此时需要使用类似二叉搜索树中的方法，将该节点与他的右分支中的最小节点交换，此时又将问题转换成了一个删除右分支中的最小键的问题。</p><p>最后附上我的实现代码：<br>[gist <a href="https://gist.github.com/Koswu/3383ec7242a997dae163c9af922b1a56" target="_blank" rel="noopener">https://gist.github.com/Koswu/3383ec7242a997dae163c9af922b1a56</a>]</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>学习总结第三十七天——blender初探</title>
      <link href="/2018/02/26/archive/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AC%AC%E4%B8%89%E5%8D%81%E4%B8%83%E5%A4%A9%E2%80%94%E2%80%94blender%E5%88%9D%E6%8E%A2/"/>
      <url>/2018/02/26/archive/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AC%AC%E4%B8%89%E5%8D%81%E4%B8%83%E5%A4%A9%E2%80%94%E2%80%94blender%E5%88%9D%E6%8E%A2/</url>
      
        <content type="html"><![CDATA[<p>看完《白箱》中的3d制作的部分以后，突然对于3d建模感兴趣，抱着兴趣指引的方针（笑，针对一款开源3d图形处理软件——blender，进行了一番学习。经过一周的学习后，取得了不错的成效。下面是拙作：<br><a href>效果图</a></p><p>在学习的过程中，也学习到了一些图形学相关的知识。比如：我们平时用眼睛观察世界，用相机拍照，这样获取的图片属于物体的透视投影，也就是让物体投影到一点上。这种透视表现出来的是一种近大远小的视觉，这符合常识，但是不能够很好的表现物体各部分的比例。这个时候我们就需要正交视图，这是一种投影到面的视图，我们几何中学到的三视图就属于正交视图。</p><p>从零开始构建一张效果图，大致需要以下步骤：</p><ol><li>建模<br>这一步需要很有耐性，基本上就是在一些规则图形上修修补补，构建物体的形状</li><li>材质选择<br>对已经建模的物体进行上色,上贴图等等，改变物体的材质效果</li><li>灯光设置<br>对场景进行灯光布置和摄像机的位置摆放位置调整</li><li>渲染<br>对于场景计算灯光和材质等等的效果建立出最终的图片</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2018寒假计划</title>
      <link href="/2018/01/23/archive/2018%E5%AF%92%E5%81%87%E8%AE%A1%E5%88%92/"/>
      <url>/2018/01/23/archive/2018%E5%AF%92%E5%81%87%E8%AE%A1%E5%88%92/</url>
      
        <content type="html"><![CDATA[<p>不知不觉一个学期过去了，虽然有些遗憾，但我仍然庆幸收获了不少知识。在此对我的寒假要学习的东西做一个粗略的计划，以此提醒自己还应该做的事情，防止玩过头。</p><hr><p>首先寒假中的第一个任务是对算法和数据结构的学习，由于开学就要参加蓝桥杯的比赛，必须在开学之前对于竞赛相关的题目有一个较为全面的认知。除特殊情况以外，应当每天抽出时间，特别是晚上的时间，对算法和数据结构进行一定的练习。</p><p>其次，在大一的时候，计划读完《深入理解计算计算机系统》这本书，所以在寒假期间应当至少看到“处理器体系结构”一章。这个可以利用其许多闲置的下午时光完成。</p><p>然后是对于计协的要求，对于web后端和数据库进行一些学习，可尝试利用起早晨与的时间来进行。</p><p>最后在技术之外，养成良好的生活习惯方面，应当设置闹钟，将学校里养成的生物钟调整过来，无特殊情况，晚上一般应在12点前睡觉，最迟不超过12点半，而早上在8点半起床，最迟不超过9点半。同时在中午也养成短暂午休的习惯，每天可以在午休前背下英语。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>学习总结第三十六天——余弦定理判断文章相似度</title>
      <link href="/2018/01/22/archive/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AC%AC%E4%B8%89%E5%8D%81%E5%85%AD%E5%A4%A9%E2%80%94%E2%80%94%E4%BD%99%E5%BC%A6%E5%AE%9A%E7%90%86%E5%88%A4%E6%96%AD%E6%96%87%E7%AB%A0%E7%9B%B8%E4%BC%BC%E5%BA%A6/"/>
      <url>/2018/01/22/archive/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AC%AC%E4%B8%89%E5%8D%81%E5%85%AD%E5%A4%A9%E2%80%94%E2%80%94%E4%BD%99%E5%BC%A6%E5%AE%9A%E7%90%86%E5%88%A4%E6%96%AD%E6%96%87%E7%AB%A0%E7%9B%B8%E4%BC%BC%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<p>拜读过《数学之美》中的余弦定理应用的相关章节，并学习了符号表的实现以后，一直希望自己能够做一个能够判断文章相似度类似的东西。虽然基础有限，但是仍然取得了不错的效果。<br>分词相关对于我来说数学基础还是有些不够，所以我决定暂时不进行分词，对英文文章这种天生的分词进行处理就好。<br>首先是实现一个符号表，在C++中声明一个模板类，实现如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> SILIB_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STLIB_H_</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Key, <span class="keyword">typename</span> Value&gt; <span class="class"><span class="keyword">class</span> <span class="title">BinarySearchST</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  Key *keys;</span><br><span class="line">  Value *values;</span><br><span class="line">  <span class="keyword">int</span> st_size;</span><br><span class="line">  <span class="keyword">int</span> count;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> capacity)</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  BinarySearchST(<span class="keyword">int</span> capacity);</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">isempty</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function">Value <span class="title">get</span><span class="params">(Key key)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">rank</span><span class="params">(Key key)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">put</span><span class="params">(Key key, Value val)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(Key key)</span></span>;</span><br><span class="line">  <span class="function">Key <span class="title">min</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function">Key <span class="title">max</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function">Key <span class="title">select</span><span class="params">(<span class="keyword">int</span> k)</span></span>;</span><br><span class="line">  <span class="function">Key <span class="title">ceiling</span><span class="params">(Key key)</span></span>;</span><br><span class="line">  <span class="function">Key <span class="title">floor</span><span class="params">(Key key)</span></span>;</span><br><span class="line">  ~BinarySearchST();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Key, <span class="keyword">typename</span> Value&gt;<span class="keyword">int</span> BinarySearchST&lt;Key,Value&gt;::resize(<span class="keyword">int</span> capacity)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (capacity &lt; count + <span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//capacity is too small...</span></span><br><span class="line">  &#125;</span><br><span class="line">  Key *keys_new = <span class="keyword">new</span> Key[capacity];</span><br><span class="line">  Value *values_new = <span class="keyword">new</span> Value[capacity];</span><br><span class="line">  <span class="keyword">if</span> (!keys_new || !values_new)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-2</span>;<span class="comment">//allocate memory error...</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; count;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    keys_new[i] = keys[i];</span><br><span class="line">    values_new[i] = values[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">delete</span>[] keys;</span><br><span class="line">  <span class="keyword">delete</span>[] values;</span><br><span class="line">  keys = keys_new;</span><br><span class="line">  values = values_new;</span><br><span class="line">  st_size = capacity;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Key, <span class="keyword">typename</span> Value&gt;BinarySearchST&lt;Key,Value&gt;::BinarySearchST(<span class="keyword">int</span> capacity):st_size(capacity),count(<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">  keys = <span class="keyword">new</span> Key[capacity];</span><br><span class="line">  values = <span class="keyword">new</span> Value[capacity];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Key, <span class="keyword">typename</span> Value&gt;<span class="keyword">int</span> BinarySearchST&lt;Key,Value&gt;::size()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Key, <span class="keyword">typename</span> Value&gt;<span class="keyword">bool</span> BinarySearchST&lt;Key,Value&gt;::isempty()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> !count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Key, <span class="keyword">typename</span> Value&gt;Value BinarySearchST&lt;Key,Value&gt;::get(Key key)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (isempty())</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> i = rank(key);</span><br><span class="line">  <span class="keyword">if</span> (i &lt; count &amp;&amp; keys[i] == key)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> values[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Key, <span class="keyword">typename</span> Value&gt;<span class="keyword">int</span> BinarySearchST&lt;Key,Value&gt;::rank(Key key)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> lo = <span class="number">0</span>, hi = count<span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">while</span> (lo &lt;= hi)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">int</span> mid = lo + (hi-lo)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (keys[mid] &gt; key)</span><br><span class="line">    &#123;</span><br><span class="line">      hi = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (keys[mid] &lt; key)</span><br><span class="line">    &#123;</span><br><span class="line">      lo = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> mid;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> lo;<span class="comment">//if not found, return the index of lower than search key.</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Key, <span class="keyword">typename</span> Value&gt;<span class="keyword">int</span> BinarySearchST&lt;Key,Value&gt;::put(Key key, Value val)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> i = rank(key);</span><br><span class="line">  <span class="keyword">if</span> (i &lt; count &amp;&amp; keys[i] == key)</span><br><span class="line">  &#123;</span><br><span class="line">    values[i] = val;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (count+<span class="number">1</span> &gt; st_size)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">int</span> ret_code=resize(st_size*<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret_code != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> ret_code;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> j = count; j &gt; i;j--)</span><br><span class="line">  &#123;</span><br><span class="line">    keys[j] = keys[j<span class="number">-1</span>];</span><br><span class="line">    values[j] = values[j<span class="number">-1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  keys[i] = key;</span><br><span class="line">  values[i] = val;</span><br><span class="line">  count++;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Key, <span class="keyword">typename</span> Value&gt;<span class="keyword">void</span> BinarySearchST&lt;Key,Value&gt;::del(Key key)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> i = rank(key);</span><br><span class="line">  <span class="keyword">if</span> (i &lt; count &amp;&amp; keys[i] == key)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = i;j &lt; --count;j++)</span><br><span class="line">    &#123;</span><br><span class="line">      keys[j] = keys[j+<span class="number">1</span>];</span><br><span class="line">      keys[j] = keys[j+<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Key, <span class="keyword">typename</span> Value&gt;Key BinarySearchST&lt;Key,Value&gt;::min()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> keys[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Key, <span class="keyword">typename</span> Value&gt;Key BinarySearchST&lt;Key,Value&gt;::max()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> keys[count<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Key, <span class="keyword">typename</span> Value&gt;Key BinarySearchST&lt;Key,Value&gt;::select(<span class="keyword">int</span> k)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> keys[k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Key, <span class="keyword">typename</span> Value&gt;Key BinarySearchST&lt;Key,Value&gt;::ceiling(Key key)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> i = rank(key);</span><br><span class="line">  <span class="keyword">return</span> keys[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Key, <span class="keyword">typename</span> Value&gt;Key BinarySearchST&lt;Key,Value&gt;::<span class="built_in">floor</span>(Key key)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> i = rank(key);</span><br><span class="line">  <span class="keyword">if</span> (keys[i] &gt; <span class="number">0</span> &amp;&amp; keys[i] == key)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> keys[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> keys[i+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Key, <span class="keyword">typename</span> Value&gt; BinarySearchST&lt;Key,Value&gt;::~BinarySearchST()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">delete</span>[] keys;</span><br><span class="line">  <span class="keyword">delete</span>[] values;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>这里统计词频率时，Key为string，Value为int，我们可以设计一个函数，能够将文章读入符号表。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">BinarySearchST&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; *getCountedObj(<span class="built_in">std</span>::ifstream&amp; ifst)</span><br><span class="line">&#123;</span><br><span class="line">  BinarySearchST&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; *st = <span class="keyword">new</span> BinarySearchST&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt;(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">while</span> (!ifst.eof())</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">string</span> word;</span><br><span class="line">    ifst &gt;&gt; word;</span><br><span class="line">    <span class="keyword">if</span> (word != <span class="string">""</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      st-&gt;put(word, st-&gt;get(word)+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> st;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时可以得到两个文章向量，各维的坐标值对应了相应的词频。使用以下函数可以计算出这两个文章向量夹角的余弦值，即文章相似度</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">calculateSimialarity</span><span class="params">(BinarySearchST&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; *st1, BinarySearchST&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; *st2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i=<span class="number">0</span>, j=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">long</span> <span class="keyword">long</span> product = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">double</span> abs1 = <span class="number">0</span>,abs2 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (i&lt;st1-&gt;size()&amp;&amp;j&lt;st2-&gt;size())</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">string</span> key1 = st1-&gt;select(i);</span><br><span class="line">    <span class="built_in">string</span> key2 = st2-&gt;select(j);</span><br><span class="line">    <span class="keyword">if</span> (key1 &gt; key2)</span><br><span class="line">    &#123;</span><br><span class="line">      abs2 += <span class="built_in">pow</span>(st2-&gt;get(key2), <span class="number">2</span>);</span><br><span class="line">      j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (key1 &lt; key2)</span><br><span class="line">    &#123;</span><br><span class="line">      abs1 +=  <span class="built_in">pow</span>(st1-&gt;get(key1), <span class="number">2</span>);</span><br><span class="line">      i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      product += st1-&gt;get(key1) * st2-&gt;get(key2);</span><br><span class="line">      abs1 += <span class="built_in">pow</span>(st1-&gt;get(key1), <span class="number">2</span>);</span><br><span class="line">      abs2 += <span class="built_in">pow</span>(st2-&gt;get(key2), <span class="number">2</span>);</span><br><span class="line">      j++;</span><br><span class="line">      i++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  abs1 = <span class="built_in">sqrt</span>(abs1);</span><br><span class="line">  abs2 = <span class="built_in">sqrt</span>(abs2);</span><br><span class="line">  <span class="keyword">double</span> cosed_degree = product/(abs1*abs2);</span><br><span class="line">  <span class="keyword">return</span> cosed_degree;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<a href="https://sherlock-holm.es/ascii/" target="_blank" rel="noopener">这个网站</a>和<a href="https://textfiles.com/stories/" target="_blank" rel="noopener">这个</a>中的小说作为实验，发现同为福尔摩斯的两篇小说基本上相似度在0.9以上，不同题材小说仅有0.6左右的相似度，较好地符合了预期，实验大成功！！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>学习总结第三十五天——arch Linux安装</title>
      <link href="/2018/01/07/archive/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AC%AC%E4%B8%89%E5%8D%81%E4%BA%94%E5%A4%A9%E2%80%94%E2%80%94arch%20Linux%E5%AE%89%E8%A3%85/"/>
      <url>/2018/01/07/archive/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AC%AC%E4%B8%89%E5%8D%81%E4%BA%94%E5%A4%A9%E2%80%94%E2%80%94arch%20Linux%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<p>想入坑<a href="https://wiki.archlinux.org/index.php/Arch_Linux_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)" title="Arch" target="_blank" rel="noopener">Arch</a>好久了，但是有很多次都因为在解决引导的时候就卡了，最后一直没能装上。经过上次制作启动盘的经验，对于grub有了更多的了解。这次再次尝试安装，虽然经历了一些挫折，但还是成功了。下面是具体的安装过程。</p><p>首先用u盘引导系统，接下来就进入了arch的Live CD模式（雾）。这也是arch linux最劝退的一步，很多人看到装个系统都要命令行，就退了.。其实用命令行装系统才能真正在装系统的同时学习到知识。</p><h2 id="同步时间"><a class="markdownIt-Anchor" href="#同步时间"></a> 同步时间</h2><p>由于arch采用网络安装的方式，所以先让计算机连接上网络，并执行</p><pre><code>timedatectl set-ntp true</code></pre><h2 id="硬盘分区"><a class="markdownIt-Anchor" href="#硬盘分区"></a> 硬盘分区</h2><p>对硬盘进行分区</p><pre><code>fdisk /dev/sdY</code></pre><p>需要注意的是，如果电脑为UEFI引导的，需要将硬盘设置为GPT分区，否则为传统MBR模式。由于我装双系统，所以就只分了一个分区作为根目录，一个分区作为交换分区。<br>交换分区记得将分区的类型设置为82,这样可以让systemd自动发现并挂载。</p><p>格式化交换分区</p><pre><code>mkswap /sdYM</code></pre><p>格式化主分区</p><pre><code>mkfs.ext4 /sdYN</code></pre><p>将主分区挂载至/mnt，将EFI分区挂载至/mnt/boot</p><pre><code>mount /dev/sdYN /mnt #挂载主分区mkdir /mnt/bootmount /dev/sda1 /mnt/boot #挂载EFI分区</code></pre><p>安装系统文件</p><pre><code>pacstrap /mnt base base-devel</code></pre><p>生成fstab文件并检查</p><pre><code>genfstab -U /mnt &gt;&gt; /mnt/etc/fstabcat /mnt/etc/fstab</code></pre><p>添加swap分区的UUID到fstab</p><pre><code>echo &quot;#/dev/sdYM swap \n UUID=`lsblk -no UUID /dev/sdYM` none swap defaults 0 0&quot; &gt;&gt; /mnt/etc/fstab</code></pre><p>chroot到新的系统目录，由于普通的chroot容器有一些问题，所以我们采用专门开发的arch-chroot</p><pre><code>arch-chroot /mnt</code></pre><p>设置时区</p><pre><code>ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtimehwclock --systohc --utc</code></pre><p>设置本地化信息，打开/etc/locale.gen，取消以下几行的注释</p><pre><code>en_US.UTF-8 UTF-8zh_CN.UTF-8 UTF-8zh_TW.UTF-8 UTF-8</code></pre><p>运行</p><pre><code>locale-gen</code></pre><p>以生成本地化配置文件</p><p>在hosts中设置localhost，如果不设置也行，但会造成firefox打开慢等问题</p><pre><code>#在/etc/hosts中加入127.0.0.1     localhost</code></pre><p>设置root密码</p><pre><code>passwd</code></pre><p>如果使用intel处理器，安装intel-ucode以启用微码更新</p><pre><code>pacman -S intel-ucode</code></pre><hr><p>下面进入第二阶段，安装开机引导</p><p>安装grub</p><pre><code>pacman -S grubgrub-insatll --efi-directory=/boot</code></pre><p>配置grub<br>pacman os-prober<br>mkdir /mnt/windows<br>mount /dev/sda2 /mnt/windows#挂载其他系统的磁盘<br>grub-mkconfig -o /boot/grub/gurb.cfg</p><p>至此就可以正常进入系统了，重启</p><pre><code>exitumount -R /mntreboot</code></pre><p>如果仍然进入windows的话，在windows借助一些工具，如bootice来修改UEFI启动顺序，将arch放到第一个。</p><hr><p>第三阶段，安装GNOME桌面</p><p>首先解决显卡驱动的问题,以英特尔和英伟达双显卡驱动为例，安装相关驱动和humblebee——实现显卡交火的工具</p><pre><code>sudo pacman -S humblebee mesa xf86-video-intel nvidia primus</code></pre><p>安装后系统命令将默认用集成显卡运行，如果需要使用独显运行，使用</p><pre><code>primusrun 命令</code></pre><p>曾经linux下主流的显示协议是X11，现在GNOME已经切换到了效率更高的Wayland，直接安装gnome软件组来获取所有套件</p><pre><code>sudo pacman -S gnome</code></pre><p>如果需要其他的gnome软件包的话运行</p><pre><code>sudo pacman -S gnome-extra</code></pre><p>开启gdm</p><pre><code>systemctl enable gdm</code></pre><p>重启系统，就这样，基本的arch linux就安装好了</p><p>贴一张安装好的截图：<br><a href="/attachment/img/arch_screen.png">!安装后</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>学习总结第三十四天——记一次USB启动盘的制作</title>
      <link href="/2018/01/01/archive/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AC%AC%E4%B8%89%E5%8D%81%E5%9B%9B%E5%A4%A9%E2%80%94%E2%80%94%E8%AE%B0%E4%B8%80%E6%AC%A1USB%E5%90%AF%E5%8A%A8%E7%9B%98%E7%9A%84%E5%88%B6%E4%BD%9C/"/>
      <url>/2018/01/01/archive/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AC%AC%E4%B8%89%E5%8D%81%E5%9B%9B%E5%A4%A9%E2%80%94%E2%80%94%E8%AE%B0%E4%B8%80%E6%AC%A1USB%E5%90%AF%E5%8A%A8%E7%9B%98%E7%9A%84%E5%88%B6%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>由于最近突然有换系统的想法，于是打算直接做一个启动盘以应付将来的各种装机需求，说起来简单做起来难，在几天摸爬滚打后终于完成了，在这里记录一下过程供参考。</p><hr><h2 id="初拟需求"><a class="markdownIt-Anchor" href="#初拟需求"></a> 初拟需求</h2><p>当然是越大越全越好啊，手头有一个32G的U盘，理论上应该能够装挺多系统的，会用到的都塞进去最好，下面是可能会用到的系统</p><ul><li>Win系<ul><li>Windows XP (给各种可能遇到的老的电脑装机)</li><li>Win 7 x64(给可能遇到兼容性问题的电脑装机)</li><li>Win 10 x64(新电脑装机)</li></ul></li><li>Linux系<ul><li>Arch Linux (即将给我的电脑换上的系统)</li><li>CentOS (学习服务器运维可能会装到)</li><li>Ubuntu (Linux新手必备)</li><li>Kali Linux (安全工具可能用到，最好直接是Live CD)</li></ul></li></ul><h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2><p>首先排除目前市面上常见的各种XX装机盘制作工具，这种工具制作出来的质量不说，里面有没有挂恶意程序也是未知的，所以一切最好采用开源工具和官方原版镜像制作。初拟采用grub2装入u盘做引导，然后提供选项进行选择进入。利用grub2的iso载入能力，将不同的镜像放到iso/目录里面。</p><h2 id="操作与重改需求"><a class="markdownIt-Anchor" href="#操作与重改需求"></a> 操作与重改需求</h2><p>操作过程中，发现grub对于win系没法直接载入iso，因为实质上grub是将kernel内核读入内存以后，再对内核传递参数告诉后面应该从iso去读。但是win毕竟不是linux，目前网上的解决方案里面要么只能支持老版本的winNT，要么需要将整个iso先读入内存，这对小内存机器极不友好。同时，Debian对于读入iso引导的方式支持性也很差。并且Cent OS完整版占用太大，对于兼容性好的FAT32放不下。</p><p>解决方案：因为不常用去掉CentOS和Debian系的Kali，win可以采用分区+合盘的方案，将U盘借助工具分区为主分区(FAT32)和win分区(NTFS)，将win镜像解压到win分区里，并且将几个win的wim文件参照网上的教程合并为一个esd文件。xp的安装方式也和win7以后不一样，所以排除。<br>这时还剩下的系统有：</p><ul><li>Win系<ul><li><s>Windows XP</s></li><li>Win 7 x64</li><li>Win 10 x64</li></ul></li><li>Linux系<ul><li>Arch Linux</li><li><s>CentOS</s></li><li>Ubuntu</li><li><s>Kali Linux</s></li></ul></li></ul><p>实际制作：<br>首先将U盘分区，然后将grub安装到u盘上</p><pre><code>sudo mkdir /mnt/usbsudo mount /dev/sdY /mnt/usb #挂载U盘sudo grub-install --target=i386-pc --boot-directory=/mnt/usb/boot --recheck /dev/sdY #安装BIOS支持sudo grub-insatall --target=x86_64-efi --efi-directory=/mnt/usb --boot-directory=/mnt/usb/boot #安装UEFI支持</code></pre><p>然后是grub.cfg配置文件</p><pre><code>#加载模块insmod catinsmod gzioinsmod ext2insmod ntfsinsmod fontinsmod fatinsmod part_msdosinsmod loopbackinsmod iso9660if [ ${grub_platform} == 'efi' ]theninsmod efi_gopinsmod efi_ugaelseinsmod vbefiinsmod fontinsmod search_fs_uuidset default=0   #默认选项set timeout=30   #默认等待时间#加载字体if loadfont ${prefix}/fonts/unicode.pf2theninsmod gfxtermset gfxmode=autoset gfxpayload=keepterminal_output gfxtermfi#设置语言set locale_dir=${prefix}/localeset lang=zh_CN#设置背景图片set root='hd0,1'insmod jpegbackground_image /boot/grub/images/anime1.jpg#设置未选中项颜色set menu_color_normal=white/black#设置选中项颜色set menu_color_highlight=cyan/black# ------------------------------------------------------------------------#搜索根目录下有iso的磁盘设定为root分区search --set -f /iso#set root=(hd0,2)menuentry &quot;安装WINDOWS&quot; {search --set -f /bootmgr#搜索根目录下有bootmgr的磁盘设定为root分区if [ ${grub_platform} == 'efi' ]#efi采用链式引导theninsmod chain#echo &quot;it's efi&quot;chainloader /efi/boot/bootx64.efielse#传统BIOS采用ntldr引导insmod ntldr#echo &quot;it's not efi&quot;ntldr /bootmgrfi}menuentry &quot;安装Arch linux x86_64 2017.10.01&quot; {set iso_path=/iso/archlinux-2017.10.01-x86_64.isoloopback loop ${iso_path}linux (loop)/arch/boot/x86_64/vmlinuz archisolabel=ARCH_201710 img_dev=/dev/disk/by-label/ISOTOOLS img_loop=$iso_path iso_path=$iso_path earlymodules=loopinitrd (loop)/arch/boot/x86_64/archiso.img}menuentry &quot;安装ubuntu-16.04.2-desktop-amd64&quot; {set iso_path=/iso/ubuntu-16.04.2-desktop-amd64.isoloopback loop ${iso_path}linux (loop)/casper/vmlinuz.efi boot=casper initrd=/casper/initrd.lz iso-scan/filename=${iso_path} quiet noeject noprompt splash --initrd (loop)/casper/initrd.lz}menuentry &quot;重启&quot;{echo &quot;Rebooting....&quot;reboot}menuentry &quot;关机&quot;{  echo &quot;Shuting down....&quot;  halt}</code></pre><p>再将相关的iso放在主分区的/iso文件夹中，并将windows合盘后的镜像写入次分区。<br>制作大成功！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>学习总结第三十三天——二进制的表示</title>
      <link href="/2017/12/24/archive/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AC%AC%E4%B8%89%E5%8D%81%E4%B8%89%E5%A4%A9%E2%80%94%E2%80%94%E4%BA%8C%E8%BF%9B%E5%88%B6%E7%9A%84%E8%A1%A8%E7%A4%BA/"/>
      <url>/2017/12/24/archive/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AC%AC%E4%B8%89%E5%8D%81%E4%B8%89%E5%A4%A9%E2%80%94%E2%80%94%E4%BA%8C%E8%BF%9B%E5%88%B6%E7%9A%84%E8%A1%A8%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<p>我们都知道，在计算机中都是使用二进制来表示整数，但是很少有人深入理解计算机具体是怎么去表示的，认为其不重要，然而事实恰恰相反，许多知名的漏洞利用的都是人们不熟悉或者疏忽了计算机里具体执行的运算。所以对于了解二进制数是怎么存储在计算机里是很有必要的。</p><p>一个n位的十进制无符号数,其每个位可以看作一个n维向量中的带有权重的维，而其权重也与位置相关，以1234为例，4的权重为10<sup>0，3的权重为10</sup>1，2的权重为10<sup>2，而1的权重为10</sup>3，其数值即为各维的长度乘以该维的权重之和，即1×10<sup>3+2*10</sup>2+3*10<sup>1+4*10</sup>0=1234。</p><p>二进制无符号数同理，其每一位的权重即为2<sup>n，以1010(2)为例，其可看作一个四维向量，各维的权重从左到右依次是2</sup>3，2<sup>2，2</sup>1，2^0。在计算机中表示二进制数时，是以字节为单位存储的。其有两种存储方式，大端法和小端法，区别在于每个数存储方式是从高地址位还是低地址位存储。如一个数为0x1234，有两个字节，如果在一个16位的机器上，分配两个内存地址分别为0x00和0x01的字节存储，在采用大端法时，内存地址0x00中存储的是0x12,0x11中存储的是0x34;而小端法相反，在0x00中存储的是0x34,0x11中存储的是0x12。这就造成了在不同的机器中，同一段代码可能会有不同的结果。下面这段代码就利用这一点，检测了运行的机器采用的是大端法还是小端法。</p><pre><code>#include &lt;stdio.h&gt;typedef unsigned char* byte_pointer;int islittle_indian(){  int i=0xFF;  byte_pointer ptr = (byte_pointer)&amp;i;  if ((*ptr) == 0xFF)  {    return 1;  }  if ((*ptr) == 0x00)  {    return 0;  }  else  {    return -1;  }}int main(int argc, char const *argv[]){  printf(&quot;%d\n&quot;,islittle_indian());  return 0;}</code></pre><p>这段代码在采用大端法的机器上运行的时候，输出0,在小端法的机器上运行的时候，便会输出1。尽管现在我们身边采用大端法的机器不多了，但是仍然需要了解。</p><p>说了这么多，表示范围仍然在无符号数内，而要扩展到有符号数，就不得不提目前大部分计算机都在采用的有符号数表示方法——补码，许多国内教科书介绍补码时，总是提到将最高位表示符号即原码，原码取反加1就是补码，但是完全没说补码的定义。其实如果了解到无符号数可以看作n维向量这一点，就很好理解补码了。</p><blockquote><p>补码就是将最高位的权重变为负值的表示方式</p></blockquote><p>如1010(2)，如果我们按照无符号数的解读方式去乘相关的权重的话，会得到1<em>2<sup>3+1*2</sup>1=10。而如果我们当成补码去解读的话，就是1</em>(-2<sup>3)+2*2</sup>1 = -6，这也得以说明为什么补码中负数的表示范围要比正数大1。补码有很多优点，如进行减法的运算和加法一样，在正数范围内与无符号数表示方法一样等等。虽然补码很方便，但是也要注意与无符号数混用时，经常会产生难以发现且严重的bug。</p><p>写了这么多，全面了解计算机系统对于写出健壮程序的重要性可见一斑，今后也应当多留心这方面的东西，才能更好地理解自己写出的程序。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>学习总结第三十二天——从树结构到堆排序</title>
      <link href="/2017/12/15/archive/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AC%AC%E4%B8%89%E5%8D%81%E4%BA%8C%E5%A4%A9%E2%80%94%E2%80%94%E4%BB%8E%E6%A0%91%E7%BB%93%E6%9E%84%E5%88%B0%E5%A0%86%E6%8E%92%E5%BA%8F/"/>
      <url>/2017/12/15/archive/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AC%AC%E4%B8%89%E5%8D%81%E4%BA%8C%E5%A4%A9%E2%80%94%E2%80%94%E4%BB%8E%E6%A0%91%E7%BB%93%E6%9E%84%E5%88%B0%E5%A0%86%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>树结构，或者说树状结构，相信很多人都不陌生，它的名称来自于以树的象征来表现出构造之间的关系，虽然在图象的呈现上，其为一个上下颠倒的树。以下为维基中对于树结构的定义。</p><blockquote><p>在计算机科学中，树（英语：tree）是一种抽象数据类型（ADT）或是实作这种抽象数据类型的数据结构，用来模拟具有树状结构性质的数据集合。它是由n（n&gt;0）个有限节点组成一个具有层次关系的集合。</p></blockquote><ul><li>节点的度：一个节点含有的子树的个数称为该节点的度；</li><li>树的度：一棵树中，最大的节点的度称为树的度；</li><li>叶节点或终端节点：度为零的节点；</li><li>非终端节点或分支节点：度不为零的节点；</li><li>父亲节点或父节点：若一个节点含有子节点，则这个节点称为其子节点的父节点；</li><li>孩子节点或子节点：一个节点含有的子树的根节点称为该节点的子节点；</li><li>兄弟节点：具有相同父节点的节点互称为兄弟节点；</li><li>节点的层次：从根开始定义起，根为第1层，根的子节点为第2层，以此类推；</li><li>深度：对于任意节点n,n的深度为从根到n的唯一路径长，根的深度为0；</li><li>高度：对于任意节点n,n的高度为从n到一片树叶的最长路径长，所有树叶的高度为0；</li><li>堂兄弟节点：父节点在同一层的节点互为堂兄弟；</li><li>节点的祖先：从根到该节点所经分支上的所有节点；</li><li>子孙：以某节点为根的子树中任一节点都称为该节点的子孙。</li><li>森林：由m（m&gt;=0）棵互不相交的树的集合称为森林；</li></ul><p>而每个节点最多含有两个子树的树又被称为二叉树，下图为一颗二叉树的结构<br><img src="/attachment/img/300px-Binary_tree.svg.png" alt="由Derrick Coetzee - 自己的作品，公有领域，https://commons.wikimedia.org/w/index.php?curid=488419"></p><p>明白了二叉树以后，我们便可以来实现一种特殊的二叉树——“二叉堆”。<br>想象一下我们堆东西时的情景，大的物体堆在下层，小的堆在上层。二叉堆同理，父节点的键值总是保持固定的序关系于任何一个子节点的键值，且每个节点的左子树和右子树都是一个二叉堆。</p><p>当父节点的键值总是大于或等于任何一个子节点的键值时为最大堆，相反，当父节点的键值总是小于或等于任何一个子节点的键值时为最小堆。</p><p>二叉堆一般采用数组来实现，并且舍弃了下标为0的值，这样的话便可以满足关系：元素i的子节点为2i和2i+1。可以方便的遍历一个二叉堆。同时我们应该实现两个方法，让二叉堆在从堆顶移除元素和在堆底添加元素后，能够恢复二叉堆原来的性质。</p><p>我们一般将这两个方法命名为sink()和swim()，这个过程可以看作，减少一个元素，就要让最后的元素补上开头的位置，再让这个元素下沉(sink)到合适的位置，增加一个元素，就要在堆的最后插入元素，再将这个元素上浮(swim)到合适的位置。</p><p>利用我们所实现二叉堆的两个方法，我们可以实现一个优先队列，有限队列与队列有些像，但是其返回值永远为队列中的最大/最小值。目前已知的有限队列的实现方法中，二叉堆是最实用的，因为其将入列和出列操作都限制在O(nlgn)的时间复杂度之内。</p><p>以下为一个返回最大值的优先队列实现：</p><pre><code>template &lt;typename T&gt;void swap(T &amp;a, T&amp;b){  T temp = a;  a = b;  b = temp;}template &lt;typename T&gt;class MaxPQ{private:  T *datas;  int pqsize;  int pqcount;  void swim(int k);  void sink(int k);public:  MaxPQ ();  MaxPQ (int max);  MaxPQ (T d[], int size);  void insert(T v);  T max();  T delmax();  bool isEmpty();  int size();  void resize(int size);  virtual ~MaxPQ ();};template &lt;typename T&gt;void MaxPQ&lt;T&gt;::swim(int k){  while (k &gt; 1 &amp;&amp; this-&gt;datas[k&gt;&gt;1] &lt; this-&gt;datas[k])  {    swap(this-&gt;datas[k&gt;&gt;1],this-&gt;datas[k]);    k&gt;&gt;=1;  }}template &lt;typename T&gt;void MaxPQ&lt;T&gt;::sink(int k){  while (k&lt;&lt;1 &lt;= this-&gt;pqcount)  {    int j = k&lt;&lt;1;    if (j &lt; this-&gt;pqcount &amp;&amp; this-&gt;datas[j+1] &gt; this-&gt;datas[j])    {      j++;    }    if (this-&gt;datas[j] &gt; this-&gt;datas[k])    {      swap(this-&gt;datas[j],this-&gt;datas[k]);    }    k = j;  }}template &lt;typename T&gt;MaxPQ&lt;T&gt;::MaxPQ():pqsize(4),pqcount(0){  this-&gt;datas = new T[pqsize];}template &lt;typename T&gt;MaxPQ&lt;T&gt;::MaxPQ(int max):pqsize(max),pqcount(0){  this-&gt;datas = new T[pqsize];}template &lt;typename T&gt;MaxPQ&lt;T&gt;::MaxPQ(T d[], int size):pqsize(size+1),pqcount(0){  this-&gt;datas = new T[pqsize];  for (int i = 0;i &lt; size;i++)  {    this-&gt;insert(d[i]);  }}template &lt;typename T&gt;T MaxPQ&lt;T&gt;::max(){  if (this-&gt;pqcount &gt; 0)  {    return this-&gt;datas[1];  }  return (T)NULL;}template &lt;typename T&gt;T MaxPQ&lt;T&gt;::delmax(){  if (this-&gt;pqcount &gt; 0)  {    T max = this-&gt;datas[1];    //this-&gt;pqcount--;    if (this-&gt;pqcount &gt; 0)    {      this-&gt;datas[1] = this-&gt;datas[pqcount];      this-&gt;pqcount--;      sink(1);    }    return max;  }  return (T)NULL;}template &lt;typename T&gt;bool MaxPQ&lt;T&gt;::isEmpty(){  return this-&gt;pqcount == 0;}template &lt;typename T&gt;int MaxPQ&lt;T&gt;::size(){  return this-&gt;pqcount;}template &lt;typename T&gt;void MaxPQ&lt;T&gt;::resize(int size){  T *new_data = new T[size];  for (int i = 0;i &lt;= this-&gt;pqcount;i++)  {    new_data[i] = this-&gt;datas[i];  }  delete this-&gt;datas;  this-&gt;datas = new_data;}template &lt;typename T&gt;void MaxPQ&lt;T&gt;::insert(T v){  if (this-&gt;pqcount+1 &gt;= this-&gt;pqsize)  {    pqsize &lt;&lt;= 1;    this-&gt;resize(pqsize);  }  this-&gt;datas[++this-&gt;pqcount] = v;  this-&gt;swim(this-&gt;pqcount);}template &lt;typename T&gt;MaxPQ&lt;T&gt;::~MaxPQ(){  delete this-&gt;datas;}int main(int argc, char const *argv[]){  MaxPQ&lt;int&gt; a;  //int input_value;  a.insert(3);  a.insert(3);  a.insert(234);  a.insert(2341);  a.insert(9999);  std::cout &lt;&lt; a.delmax() &lt;&lt; ' ' &lt;&lt; a.delmax() &lt;&lt; std::endl;  std::cout &lt;&lt; a.delmax() &lt;&lt; ' ' &lt;&lt; a.delmax() &lt;&lt; std::endl;  std::cout &lt;&lt; a.delmax() &lt;&lt; std::endl;  return 0;}</code></pre><p>堆排序，在实现了优先队列的基础上，就并不难了，只要数组先构建为有限队列，然后在依次执行出列操作，得到的一组数据就已经排序，同时我们还可以进一步简化，只用sink()方法就可以来构建一个堆，下面是一个堆排序的实现：</p><pre><code>#include &lt;iostream&gt;template &lt;typename T&gt;void sink(T *datas,int index,int size){  T new_node = datas[index];  while (index&lt;&lt;1 &lt;= size)  {    int j = index&lt;&lt;1;    if (j &lt; size &amp;&amp; datas[j] &lt; datas[j+1])    {      j++;    }    if (new_node &gt; datas[j])    {      break;    }    datas[index] = datas[j];    index = j;  }  datas[index] =new_node;}template &lt;typename T&gt;void heap_sort(T datas, int size){  //构造二叉堆  for (int k = size&lt;&lt;1;k&gt;0;k--)  {    sink(datas, k, size);  }  //排序  while(size &gt; 1)  {    std::swap(datas[1],datas[size--]);//取出最大值    sink(datas, 1, size);//重新构造二叉堆  }}int main(int argc, char const *argv[]){  int a[5] = {0,1,3,4,1};  heap_sort(a,5);  for (auto i:a)  {    std::cout &lt;&lt; i  &lt;&lt; std::endl;  }  return 0;}</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>学习总结第三十一天——快速排序与union-find算法</title>
      <link href="/2017/12/07/archive/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AC%AC%E4%B8%89%E5%8D%81%E4%B8%80%E5%A4%A9%E2%80%94%E2%80%94%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E4%B8%8Eunion-find%E7%AE%97%E6%B3%95/"/>
      <url>/2017/12/07/archive/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AC%AC%E4%B8%89%E5%8D%81%E4%B8%80%E5%A4%A9%E2%80%94%E2%80%94%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E4%B8%8Eunion-find%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>快速排序，听起来很高大上，其实快速排序并不总是能够实现最快的排序。但在大多数情况下，快速排序是一个优秀的排序算法，可以实现O(nlgn)（线性对数级别）的时间复杂度。</p><p>快速排序的中心思想，也是分治法，其内容为：在这组数据中选取一个基准，将一组数据中大于这个基准的数作为一组，其余为另一组，再分别对两组数据进行排序。最后就可以得到已排序的数组。<br>快速排序在开始时，与归并排序一样需要许多额外的空间来分别存放大于基准的数和小于基准的数。后来人们提出了一个改进方法，将其可以成为一个原地算法，于是其优势便得以展现出来了，下面是一个原始版本的快速排序：<br>#include <iostream></iostream></p><pre><code>using namespace std;template &lt;typename T&gt; void quick_sort(T *datas, int size){  if (size &lt; 2)  {    return;  }  T before[size], after[size], mid;//这里创建了两个数组  int before_index = 0, after_index = 0, index = 0;  mid = datas[index++];  while (index&lt;size) {    if (mid&gt;datas[index])    {      before[before_index++] = datas[index++];    }    else    {      after[after_index++] = datas[index++];    }  }  quick_sort(before, before_index);  quick_sort(after, after_index);  index = 0;  //int i = 0;  for (int i = 0;i&lt;before_index;i++)  {    datas[index++] = before[i];  }  datas[index++] = mid;  for (int i = 0;i&lt;after_index;i++)  {    datas[index++] = after[i];  }  return;}int main(int argc, char const *argv[]) {  int a[]={234,234,61,12,5,31,6,3,2354,1,1243,63};  quick_sort(a, sizeof(a)/sizeof(int));  for (auto i:a)  {    std::cout &lt;&lt; i &lt;&lt; ' ';  }  std::cout &lt;&lt; std::endl;  return 0;}</code></pre><p>可以看到这个版本使用了两个数组，导致这个算法要求的空间复杂度很高，于是就有了下面这种原地版本的改进：</p><pre><code>template &lt;typename T&gt;void swap(T &amp;a, T&amp;b){  T temp = a;  a = b;  b = temp;}template &lt;typename T&gt; void quick_sort_inplace(T *datas, int size){  if (size &lt; 2)  {    return;  }  int before_index = 0;  int mid = datas[size-1];  for (int i = 0;i&lt;size-1;i++)  {    if (datas[i] &gt; mid)    {      swap(datas[before_index++], datas[i]);    }  }  swap(datas[before_index], datas[size-1]);  quick_sort_inplace(datas, before_index);  quick_sort_inplace(datas+before_index+1, size-before_index-1);  return;}int main(int argc, char const *argv[]) {  int a[]={234,234,61,12,5,31,6,3,2354,1,1243,63};  quick_sort_inplace(a, sizeof(a)/sizeof(int));  for (auto i:a)  {    std::cout &lt;&lt; i &lt;&lt; ' ';  }  std::cout &lt;&lt; std::endl;  return 0;}</code></pre><p>其不同之处就是，并不是使用创建两个新数组的方式来记录比基准大与比基准小的数值，而是选择最后一个数作为基准，然后将较大的值用交换的方法放在数组的前面，并用一个整型变量来记录这个值的大小。下图为一个原地版快速排序的图解：<br><img src="/attachment/img/Partition_example.svg" alt="快速排序"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>学习总结第三十天——归并排序与随机背包</title>
      <link href="/2017/11/30/archive/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AC%AC%E4%B8%89%E5%8D%81%E5%A4%A9%E2%80%94%E2%80%94%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%E4%B8%8E%E9%9A%8F%E6%9C%BA%E8%83%8C%E5%8C%85/"/>
      <url>/2017/11/30/archive/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AC%AC%E4%B8%89%E5%8D%81%E5%A4%A9%E2%80%94%E2%80%94%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%E4%B8%8E%E9%9A%8F%E6%9C%BA%E8%83%8C%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<p>随机背包，顾名思义，是一种随机化的背包。这个背包在与普通背包不同之处在于，每次遍历的顺序都是不一样的。在C++中我们可以通过控制begin函数来使背包进行随机化，这里同时也用到了Fisher–Yates shuffle算法，其核心思想就是从最后一项开始遍历，让每个元素和他本身或前面的一个元素随机交换位置。其代码如下</p><pre><code>#include &lt;iostream&gt;#include &lt;cstdlib&gt;#include &lt;ctime&gt;#ifndef INIT_SIZE#define INIT_SIZE 10#endiftemplate &lt;typename T&gt; inline void swap(T &amp;a,T &amp;b){  T temp = a;  a = b;  b = temp;}template &lt;typename T&gt; class RandomBag{public:  RandomBag();  bool is_empty();  int size();  void add(T data);  T* begin();  T* end();  ~RandomBag();private:  T *datas;  int now_size;  int max_size;  void fy_sort();  void resize(int new_size);};template &lt;typename T&gt; void RandomBag&lt;T&gt;::resize(int new_size){  T *new_datas = new T[new_size];  for (int i=0;i &lt; this-&gt;now_size;i++)  {    new_datas[i] = this-&gt;datas[i];  }  delete this-&gt;datas;  this-&gt;datas = new_datas;}template &lt;typename T&gt; RandomBag&lt;T&gt;::RandomBag(){  this-&gt;max_size = INIT_SIZE;  this-&gt;now_size = 0;  this-&gt;datas = new T[this-&gt;now_size];}template &lt;typename T&gt; bool RandomBag&lt;T&gt;::is_empty(){  return bool(this-&gt;now_size);}template &lt;typename T&gt; int RandomBag&lt;T&gt;::size(){  return this-&gt;now_size;}template &lt;typename T&gt; void RandomBag&lt;T&gt;::add(T data){  if (now_size &gt;= max_size)  {    this-&gt;resize(this-&gt;max_size*2);  }  this-&gt;datas[this-&gt;now_size++] = data;}template &lt;typename T&gt; void RandomBag&lt;T&gt;::fy_sort(){  int i = this-&gt;now_size;  int index;  if (this-&gt;now_size == 0)  {    return;  }  while (i--) {    index = rand() % (i+1);    swap (this-&gt;datas[i], this-&gt;datas[index]);  }}template &lt;typename T&gt; T* RandomBag&lt;T&gt;::begin(){  this-&gt;fy_sort();  return &amp;(this-&gt;datas[0]);}template &lt;typename T&gt; T* RandomBag&lt;T&gt;::end(){  return &amp;(this-&gt;datas[this-&gt;now_size]);}template &lt;typename T&gt; RandomBag&lt;T&gt;::~RandomBag(){  delete this-&gt;datas;}int main(int argc, char const *argv[]) {  srand (time(NULL));  RandomBag&lt;int&gt; bag;  bag.add(3);  bag.add(7);  bag.add(2);  bag.add(1);  for (auto a : bag)  {    std::cout &lt;&lt; a &lt;&lt; std::endl;  }  return 0;}</code></pre><p>归并排序，是一种在元素较少时效率很高的排序算法，其核心思想为将大数组的排序转换为将两个已排序的数组合并问题，如下图所示</p><p><img src="/attachment/img/Merge-sort-example-300px.gif" alt="归并排序"></p><p>由<a href="https://commons.wikimedia.org/w/index.php?curid=14961648" target="_blank" rel="noopener">Swfung8</a> - 自己的作品，CC BY-SA 3.0</p><p>该算法的实现示例如下：</p><pre><code>#include &lt;iostream&gt;template &lt;typename T&gt;void merge_sort(T *arr,int len){if (len &lt; 2){  return;}T *left_arr = arr;int left_len = len/2;T *right_arr = arr+left_len;int right_len = len-left_len;merge_sort(left_arr, left_len);merge_sort(right_arr, right_len);int left_index = 0, right_index = 0, temp_index = 0;T temp[len];while (left_index &lt; left_len &amp;&amp; right_index &lt; right_len){  if (left_arr[left_index] &gt; right_arr[right_index])  {    temp[temp_index++] = left_arr[left_index++];  }  else  {    temp[temp_index++] = right_arr[right_index++];  }}while (left_index &lt; left_len){  temp[temp_index++] = left_arr[left_index++];}while (right_index &lt; right_len){  temp[temp_index++] = right_arr[right_index++];}for (int i = 0;i &lt; len;i++){  arr[i] = temp[i];}}int main(int argc, char const *argv[]) {int arr[10]={2,4,6,3,1,3,76,12,634,21};merge_sort(arr,10);for (auto i : arr){  std::cout &lt;&lt; i &lt;&lt;std::endl;}return 0;}</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>学习总结第二十九天——双向链表的C++实现</title>
      <link href="/2017/11/28/archive/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B9%9D%E5%A4%A9%E2%80%94%E2%80%94%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E7%9A%84C++%E5%AE%9E%E7%8E%B0/"/>
      <url>/2017/11/28/archive/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B9%9D%E5%A4%A9%E2%80%94%E2%80%94%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E7%9A%84C++%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>由于每日总结实在断更得厉害，改为不定期（几天）的总结。</p><hr><p>这段时间继续刷算法，并且尝试用我并不熟悉的C<ins>去实现一些数据结构，一举两得。算法方面，一直还在基本数据结构的基础上停留，不过通过运用C</ins>模板类的编辑，可以在加深这些结构的印象的时候又学会了C<ins>类的使用。中途不停犯错不停查，收获良多。双向链表可以双向遍历，相比单向链表要方便很多，下面是使用C</ins>模板实现双向链表的类：</p><pre><code>template &lt;typename T&gt; struct DoubleNode{public:  T data;  DoubleNode&lt;T&gt; *prev = nullptr;  DoubleNode&lt;T&gt; *next = nullptr;};template &lt;typename T&gt; class LinkedList{private:  DoubleNode&lt;T&gt; *head_node = nullptr;  DoubleNode&lt;T&gt; *end_node = nullptr;public:  void insert_begin(T insert_data);  void insert_end(T insert_data);  void delete_begin();  void delete_end();  void insert_node_before(T insert_data, int index);  void insert_node_after(T insert_data, int index);  void delete_node(int index);  T &amp; operator[] (int index);  ~LinkedList ();};template &lt;typename T&gt;void LinkedList&lt;T&gt;::insert_begin(T insert_data){  DoubleNode&lt;T&gt; *new_node = new DoubleNode&lt;T&gt;();  new_node-&gt;data = insert_data;  new_node-&gt;next = this-&gt;head_node;  this-&gt;head_node = new_node;  if (this-&gt;end_node == nullptr)  {    this-&gt;end_node = new_node;  }}template &lt;typename T&gt;void LinkedList&lt;T&gt;::insert_end(T insert_data){  DoubleNode&lt;T&gt; *new_node = new DoubleNode&lt;T&gt;();  new_node-&gt;data = insert_data;  if (this-&gt;head_node==nullptr)  {    this-&gt;head_node = new_node;  }  else  {    DoubleNode&lt;T&gt; *in_node = this-&gt;head_node;    while (in_node-&gt;next != nullptr)    {      in_node = in_node-&gt;next;    }    in_node-&gt;next =new_node;    in_node-&gt;next-&gt;prev =new_node;  }  this-&gt;end_node = new_node;}template &lt;typename T&gt;void LinkedList&lt;T&gt;::delete_begin(){  if (this-&gt;head_node == nullptr)  {    return;  }  DoubleNode&lt;T&gt; *del_node = this-&gt;head_node;  this-&gt;head_node = del_node-&gt;next;  delete del_node;}template &lt;typename T&gt;void LinkedList&lt;T&gt;::insert_node_before(T insert_data, int index){  DoubleNode&lt;T&gt; *in_node=this-&gt;head_node;  DoubleNode&lt;T&gt; *new_node = new DoubleNode&lt;T&gt;();  new_node-&gt;data = insert_data;  if(this-&gt;head_node == nullptr &amp;&amp; index == 0)  {    this-&gt;head_node = new_node;    this-&gt;end_node = new_node;    return;  }  for (int i = 1;i&lt;index;i++)  {    if (in_node == nullptr)    {      return;    }    in_node = in_node-&gt;next;  }  new_node-&gt;prev = in_node;  new_node-&gt;next = in_node-&gt;next;  in_node-&gt;next-&gt;prev = new_node;  in_node-&gt;next = new_node;}template &lt;typename T&gt; T&amp; LinkedList&lt;T&gt;::operator[] (int index){  DoubleNode&lt;T&gt; *get_node = this-&gt;head_node;  //if (get_node == nullptr)  //  return ;  for (int i=0;i &lt; index ;i++)  {    get_node = get_node-&gt;next;  //  if (get_node == nullptr)  //  {  //    return;  //  }  }  return get_node-&gt;data;}template &lt;typename T&gt;void LinkedList&lt;T&gt;::insert_node_after(T insert_data, int index){  DoubleNode&lt;T&gt; *in_node = this-&gt;head_node;  DoubleNode&lt;T&gt; *new_node = new DoubleNode&lt;T&gt;();  new_node-&gt;data = insert_data;  for (int i = 0;i&lt;index;i++)  {    if (in_node == nullptr)    {      return;    }    in_node = in_node-&gt;next;  }  new_node-&gt;prev = in_node;  new_node-&gt;next = in_node-&gt;next;  in_node-&gt;next = new_node;  if (new_node-&gt;next == nullptr)  {    this-&gt;end_node = new_node;  }}template &lt;typename T&gt;void LinkedList&lt;T&gt;::delete_node(int index){  DoubleNode&lt;T&gt; del_node = this-&gt;head_node;  if (del_node == nullptr)  {    return;  }  for (int i = 0;i &lt; index;i++)  {    del_node = del_node-&gt;next;    if (del_node == nullptr)    {      return;    }  }  if (del_node-&gt;prev == nullptr)  {    this-&gt;head_node = del_node-&gt;next;  }  if (del_node-&gt;next == nullptr)  {    this-&gt;end_node = del_node-&gt;prev;  }  del_node-&gt;prev-&gt;next = del_node-&gt;next;  del_node-&gt;next-&gt;prev = del_node-&gt;prev;  delete del_node;}template &lt;typename T&gt; LinkedList&lt;T&gt;::~LinkedList (){  DoubleNode&lt;T&gt; *now_head = this-&gt;head_node;  DoubleNode&lt;T&gt; *del_node = now_head;  while (del_node != nullptr) {    now_head = now_head-&gt;next;    delete del_node;    del_node = now_head;  }}</code></pre><p>这个链表实现了前插后插，前删后删等功能。下次任务：实现一个随机背包</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>学习总结第二十八天——中序表达式补全</title>
      <link href="/2017/11/23/archive/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AC%AC%E4%BA%8C%E5%8D%81%E5%85%AB%E5%A4%A9%E2%80%94%E2%80%94%E4%B8%AD%E5%BA%8F%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%A1%A5%E5%85%A8/"/>
      <url>/2017/11/23/archive/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AC%AC%E4%BA%8C%E5%8D%81%E5%85%AB%E5%A4%A9%E2%80%94%E2%80%94%E4%B8%AD%E5%BA%8F%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%A1%A5%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<p>不知不觉又咸了几天<del>(嗯)</del>,在鸽的这段时间里，参加了下学校的比赛，居然还获得了不错的成绩，但也让我进一步加强了对于自己算法基础差的认识。(接下来要好好补补了)</p><p>今天做的事情，就是完成了《算法4》上的关于中序表达式补全问题，其实这个问题本身并不难，但由于java可以很方便的创建字符串栈，用c语言创建的就没有这么方便。最后想到再用两个栈，一个栈保存字符串长度，另外一个保存字符的方法来实现与字符串栈同样的效果。下面为代码：</p><pre><code>#include &lt;string.h&gt;#include &lt;stdbool.h&gt;#include &quot;stacklib.h&quot;#ifndef INPUT_LENGTH_MAX#define INPUT_LENGTH_MAX 100#endifint main(int argc, char const *argv[]) {  char str[INPUT_LENGTH_MAX+1];  bool last_is_num = false;  fgets (str,INPUT_LENGTH_MAX,stdin);  str[strlen(str)-1] = '\0';  stack *str_len_sta = StackCreate ();  stack *data_sta = StackCreate();  stack *opt_sta = StackCreate();  for (int i=0;i&lt;strlen(str);i++)  {    switch (str[i]) {      case '+':      case '-':      case '*':      case '/':      case '%':        StackPush(opt_sta,str[i]);        last_is_num = false;      break;      case ')':      {        //分别获取之前串的存储长度        int b_chars_len = StackPop(str_len_sta);        int a_chars_len = StackPop(str_len_sta);        //合计字符串长度，3为一对括号和操作符        int total_len = a_chars_len + b_chars_len + 3;        //创建数组并保存上两次的串        char datas[total_len+1];        datas[0] = '(';        datas[total_len]='\0';        for (int i=total_len-2;i&gt;=2+a_chars_len;i--)//由于是栈，所以从后往前读取        {          datas[i] = StackPop(data_sta);        }        datas[a_chars_len+1] = StackPop(opt_sta);//取出操作符        for (int i=a_chars_len;i&gt;0;i--)        {          datas[i] = StackPop(data_sta);        }        datas[total_len-1] = ')';        datas[total_len] = '\0';        //重新存入栈中        for (int i=0;i&lt;total_len;i++)        {          StackPush(data_sta, datas[i]);        }        StackPush(str_len_sta,total_len);        last_is_num = false;      }      break;      case '0':      case '1':      case '2':      case '3':      case '4':      case '5':      case '6':      case '7':      case '8':      case '9':      {        if (last_is_num==true)        {          int temp = StackPop(str_len_sta);          temp++;          StackPush(str_len_sta,temp);          StackPush(data_sta,str[i]);        }        else        {          StackPush(str_len_sta,1);          StackPush(data_sta,str[i]);        }        last_is_num = true;      }      break;      default:        StackPush(str_len_sta,1);        StackPush(data_sta,str[i]);        last_is_num = false;      break;    }  }  //获取输出长度  int res_len = StackPop(str_len_sta);  //获取输出字符串  char res_str[res_len+1];  for (int i = res_len-1;i&gt;=0;i--)  {    res_str[i] = StackPop(data_sta);  }  res_str[res_len] = '\0';  puts (res_str);  StackFree(str_len_sta);  StackFree(data_sta);  StackFree(opt_sta);  return 0;}</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>学习总结第二十七天——康威生命游戏</title>
      <link href="/2017/11/16/archive/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B8%83%E5%A4%A9%E2%80%94%E2%80%94%E5%BA%B7%E5%A8%81%E7%94%9F%E5%91%BD%E6%B8%B8%E6%88%8F/"/>
      <url>/2017/11/16/archive/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B8%83%E5%A4%A9%E2%80%94%E2%80%94%E5%BA%B7%E5%A8%81%E7%94%9F%E5%91%BD%E6%B8%B8%E6%88%8F/</url>
      
        <content type="html"><![CDATA[<p>看了那么多天的算法，今天转变下心情，学习用python写了一个康威生命游戏（conway Game of Life)。</p><hr><p>记得第一次接触到“康威生命游戏”是因为一部番《<a href="http://bangumi.tv/subject/118783" target="_blank" rel="noopener">すべてがFになる THE PERFECT INSIDER</a>》,作品用了很多计算机相关的事物，其中片尾曲的动态演化的康威生命游戏让我记忆犹新。其实所谓生命游戏，不过就是一些点在几条规则下进行演化罢了，但是能从简短的几条规则进行演化为如此复杂的系统着实令人感到有趣。也许这个简单的数学游戏，也隐藏着很深刻的哲学意义。其表明了复杂的结构可以由简单的规则推进。下图为我运行一个”高斯帕斯卡机枪”的截图<br><a href="/attachment/img/conway.png">!img</a><br>代码如下：<br>#!/usr/bin/python3<br>#-<em>-coding:utf-8-</em>-</p><pre><code>import argparseimport numpy as npimport matplotlib.pyplot as pltimport matplotlib.animation as animationON = 255OFF = 0vals = [ON, OFF]def getGridStaus(i, j, glid, N):    return int(glid[i%N][j%N])/ONdef addGlider(i, j, glid):    glider = np.array([[OFF, OFF, ON],                       [ON, OFF, ON],                       [OFF, ON, ON]])    glid[i:i+3, j:j+3] = gliderdef addGosperGun(i, j, glid):    gun = np.zeros(11*38).reshape(11, 38);    gun[5][1] = gun[5][2] = 255    gun[6][1] = gun[6][2] = 255    gun[3][13] = gun[3][14] = 255    gun[4][12] = gun[4][16] = 255    gun[5][11] = gun[5][17] = 255    gun[6][11] = gun[6][15] = gun[6][17] = gun[6][18] = 255    gun[7][11] = gun[7][17] = 255    gun[8][12] = gun[8][16] = 255    gun[9][13] = gun[9][14] = 255    gun[1][25] = 255    gun[2][23] = gun[2][25] = 255    gun[3][21] = gun[3][22] = 255    gun[4][21] = gun[4][22] = 255    gun[5][21] = gun[5][22] = 255    gun[6][23] = gun[6][25] = 255    gun[7][25] = 255    gun[3][35] = gun[3][36] = 255    gun[4][35] = gun[4][36] = 255    glid[i:i+11, j:j+38]=gundef readPattern(file, N):    content=file.read()    return np.array(content.split()).astype(int).reshape(N, N)def randomGrid(N):    return np.random.choice(vals, N*N, p=[0.2, 0.8]).reshape(N, N)def update(frameNum, img, grid, N):    newGrid = grid.copy()    for i in range(N):        for j in range(N):            total = 0            #计算周围有几个激活的细胞            for iOffset in range(-1, 1+1):                for jOffset in range(-1, 1+1):                    if iOffset != 0 or jOffset != 0:                        total = total+getGridStaus(i+iOffset, j+jOffset, grid, N)                        #print (&quot;x=%d,y=%d,io=%d,jo=%d,total=%d&quot;%(i,j,iOffset,jOffset,total));            if grid[i][j] == ON:                if total &lt; 2 or total &gt; 3:                    newGrid[i][j] = OFF            else:                if total == 3:                    newGrid[i][j] = ON    img.set_data(newGrid)    grid[:] = newGrid[:]    return imgdef main():    #构造参数解析器    parser = argparse.ArgumentParser(description=&quot;Running for Conway's Game of Life simulation&quot;)    #创建互斥参数组    group = parser.add_mutually_exclusive_group()    #解析参数    parser.add_argument('--grid-size', dest='N', type=int, required=False)    parser.add_argument('--mov-file', dest='movfile', required=False)    group.add_argument('--pattern-file', dest='patternfile', required=False)    parser.add_argument('--interval', dest='interval', required=False)    group.add_argument('--glider', action='store_true', required=False)    group.add_argument('--gosper', action='store_true', required=False)    args = parser.parse_args()    #设置模拟大小    N = 100    if args.N and int(args.N) &gt; 8:        N = int(args.N)    #设置更新间隔    updateInterval = 50    if args.interval:        updateInterval = int(args.interval)    #设置初始条件    grid = np.array([])    if args.glider:#当设置了glider标志位时使用滑翔机初始化        grid = np.zeros(N*N).reshape(N, N)        addGlider(1, 1, grid)    elif args.gosper and N &gt; 40:#使用高斯帕滑翔机枪初始化        grid= np.zeros(N*N).reshape(N,N)        addGosperGun(1,1,grid)    elif args.patternfile:#使用文件初始化        file = open(args.patternfile)        N = int(file.readline())        grid=readPattern(file,N)        #print (grid)    else:#否则使用随机初始化        grid = randomGrid(N)    #设置动画    fig, ax = plt.subplots()    img = ax.imshow(grid, interpolation='nearest')    ani = animation.FuncAnimation(fig, update,                                  fargs=(img, grid, N, ),                                  frames=10,                                  interval=updateInterval,                                  save_count=100)    if args.movfile:        ani.save(args.movfile, fps=30, extra_args=['-vcodec', 'libx264'])    plt.show()if __name__ == '__main__':    main()</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>学习总结第二十六天——基于栈的括号 匹配</title>
      <link href="/2017/11/14/archive/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AC%AC%E4%BA%8C%E5%8D%81%E5%85%AD%E5%A4%A9%E2%80%94%E2%80%94%E5%9F%BA%E4%BA%8E%E6%A0%88%E7%9A%84%E6%8B%AC%E5%8F%B7%20%E5%8C%B9%E9%85%8D/"/>
      <url>/2017/11/14/archive/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AC%AC%E4%BA%8C%E5%8D%81%E5%85%AD%E5%A4%A9%E2%80%94%E2%80%94%E5%9F%BA%E4%BA%8E%E6%A0%88%E7%9A%84%E6%8B%AC%E5%8F%B7%20%E5%8C%B9%E9%85%8D/</url>
      
        <content type="html"><![CDATA[<p>今天继续对于栈的用法进行学习，实现了一个检查括号是否匹配的程序。但我觉得在switch语句上应该还有优化空间的，代码如下，用到了之前我构建的stacklib库：</p><pre><code>#include &quot;stacklib.h&quot;#include &lt;string.h&gt;#ifndef INPUT_MAX_LENGTH#define INPUT_MAX_LENGTH 50#endifint main(int argc, char const *argv[]) {  char str[INPUT_MAX_LENGTH+1];  fgets (str,INPUT_MAX_LENGTH,stdin);  stack *brackets=StackCreate();  bool is_match=true;  for (int i=0;i&lt;strlen(str);i++)  {    if (strchr(&quot;{[(&quot;,str[i])!=NULL)    {      StackPush(brackets,str[i]);    }    if (strchr(&quot;}])&quot;,str[i])!=NULL)    {      char pop_ch,compare_ch;      pop_ch=StackPop(brackets);      if (pop_ch==POP_ERR)        is_match=false;        switch (pop_ch) {          case '(':          compare_ch=')';          break;          case '[':          compare_ch=']';          break;          case '{':          compare_ch='}';          break;          default:          break;        }        if (compare_ch!=str[i])        is_match=false;      }    }    if (!StackIsEmpty(brackets))    {      is_match=false;    }    puts (is_match?&quot;TRUE&quot;:&quot;FALSE&quot;);    return 0;  }</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>学习总结第二十五天——C语言探究</title>
      <link href="/2017/11/13/archive/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%BA%94%E5%A4%A9%E2%80%94%E2%80%94C%E8%AF%AD%E8%A8%80%E6%8E%A2%E7%A9%B6/"/>
      <url>/2017/11/13/archive/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%BA%94%E5%A4%A9%E2%80%94%E2%80%94C%E8%AF%AD%E8%A8%80%E6%8E%A2%E7%A9%B6/</url>
      
        <content type="html"><![CDATA[<p>今天双十一买的《C专家编程》到了～<br>买了当然就看了看，虽然名字起得挺高大上的，但是内容还算实在，是一些C语言中的细节和容易犯的错误<br>可以看到，连ANSI C标准都是有互相矛盾的地方，要自己写出一个没有bug的程序是多么难Orz，就连一个sizeof (int)*p的真实含义，也可以让人纠结很长时间。</p><p>除了程序员疏忽容易引起的bug，以及各种 C语言本身设计初就犯的错误容易引起bug，如运算符的.的优先级高于*,()高于*,==高于位运算符等，这些运算符优先顺序都是反直觉的，规避的有效方法便是在其基础上加括号。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>学习总结第二十四天——链表实现队列</title>
      <link href="/2017/11/13/archive/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AC%AC%E4%BA%8C%E5%8D%81%E5%9B%9B%E5%A4%A9%E2%80%94%E2%80%94%E9%93%BE%E8%A1%A8%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/"/>
      <url>/2017/11/13/archive/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AC%AC%E4%BA%8C%E5%8D%81%E5%9B%9B%E5%A4%A9%E2%80%94%E2%80%94%E9%93%BE%E8%A1%A8%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<p>今天用链表实现了队列，我今天认识到这么一个道理，所有可读写的数据结构，都是可以用来模拟其他数据结构的,毕竟都是作为存储的工具。而最基本的两种数据结构就是数组和链表，分别对应线式结构和链式结构，但是只有数据结构正确的搭配，才能实现效率最大化。比如我可以用两个栈的API来实现一个队列，但是这样虽然实现了，但是效率极低。只有合理运用数据结构，才能构建高效的算法。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>学习总结第二十三天——链表与动态数组的性能探讨</title>
      <link href="/2017/11/11/archive/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B8%89%E5%A4%A9%E2%80%94%E2%80%94%E9%93%BE%E8%A1%A8%E4%B8%8E%E5%8A%A8%E6%80%81%E6%95%B0%E7%BB%84%E7%9A%84%E6%80%A7%E8%83%BD%E6%8E%A2%E8%AE%A8/"/>
      <url>/2017/11/11/archive/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B8%89%E5%A4%A9%E2%80%94%E2%80%94%E9%93%BE%E8%A1%A8%E4%B8%8E%E5%8A%A8%E6%80%81%E6%95%B0%E7%BB%84%E7%9A%84%E6%80%A7%E8%83%BD%E6%8E%A2%E8%AE%A8/</url>
      
        <content type="html"><![CDATA[<p>今天在C语言中实现了一个基于链表的栈，由于链表不需要像动态数组那样拷贝值，理论上来说在经常插入和删除较多数据时，其性能应该优于动态数组。但是在我的实际操作中发现，用链表实现的栈要比动态数组的实现低效很多。</p><p>经过一番查找后发现，链表拖慢的原因是频繁的malloc和free的开销太大，所以在实际使用中，很少有这样直接对链表的使用，而是采用内存池的策略。所谓内存池的策略，就是自己一次分配一块大内存空间，然后自己实现类似malloc和free的函数，从而达到减少对malloc和free的调用。实际的高级语言中，大部分时候都是使用动态数组而不是使用链表的的，如Java里的ArrayList，C++里的vector。or。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>学习总结第二十二天——栈的实现以及简易计算器</title>
      <link href="/2017/11/08/archive/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%BA%8C%E5%A4%A9%E2%80%94%E2%80%94%E6%A0%88%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%BB%A5%E5%8F%8A%E7%AE%80%E6%98%93%E8%AE%A1%E7%AE%97%E5%99%A8/"/>
      <url>/2017/11/08/archive/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%BA%8C%E5%A4%A9%E2%80%94%E2%80%94%E6%A0%88%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%BB%A5%E5%8F%8A%E7%AE%80%E6%98%93%E8%AE%A1%E7%AE%97%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>本来昨天的计划是研究背包，栈，队列的，但是没想到实际研究起来光一个栈都那么花时间。今天写了一个栈的动态数组实现API，这个API我实现了两种版本，第一种是使用了固定长度的数组来存储，很不方便，使用时必须指定大小，并且经常会有空间浪费或者栈满的需求。使用了动态数组的方法，就能实现栈的高可用性。在栈的元素较少时将栈减小，元素满时扩大。下面是第一种实现和一个测试用例：</p><pre><code>#include &lt;stdio.h&gt;#include &lt;stdbool.h&gt;#include &lt;stdlib.h&gt;typedef struct{  int * sta;  int maxSize;  int nowSize;  } stack;//API声明stack* StackCreate(int size);int StackPop (stack * sta);bool StackPush (stack *sta,int i);int StackSize (stack *sta);bool StackIsEmpty (stack *sta);bool StackIsFull (stack *sta);//void StackFree (stack *sta);//测试用例int main(int argc, char const *argv[]) {  stack *st=StackCreate(100);  for (int i=0;!StackIsFull(st);i++)  {    StackPush(st,i);  }  while (!StackIsEmpty(st)) {    printf(&quot;%d &quot;,StackPop(st));  }  StackFree(st);  return 0;}//API实现stack* StackCreate(int size){  stack *temp=malloc(sizeof(stack));  if (size&lt;1)  return NULL;  temp-&gt;sta=(int *)malloc(sizeof(int)*size);  temp-&gt;maxSize=size;  temp-&gt;nowSize=0;  return temp;}int StackPop(stack * sta){  if (StackIsEmpty(sta))  return -1;  else  return sta-&gt;sta[--sta-&gt;nowSize];}bool StackPush (stack *sta,int i){  if (StackIsFull(sta))  return false;  else  sta-&gt;sta[sta-&gt;nowSize++]=i;  return true;}int StackSize (stack *sta){  return sta-&gt;nowSize;}bool StackIsEmpty (stack *sta){  return sta-&gt;nowSize==0;}bool StackIsFull (stack *sta){  return sta-&gt;nowSize==sta-&gt;maxSize;}void StackFree(stack *sta) {  free(sta-&gt;sta);  free(sta);}</code></pre><p>第二种实现我将其打包成了一个库，下面是具体代码：</p><blockquote><p>stacklib.h<br>#ifndef STACK<br>#include &lt;stdio.h&gt;<br>#include &lt;stdbool.h&gt;<br>#include &lt;stdlib.h&gt;<br>#define STACK 0<br>#endif<br>#ifndef STACK_INIT_SIZE<br>#define STACK_INIT_SIZE 3<br>#endif<br>typedef struct<br>{<br>int * sta;<br>int maxSize;<br>int nowSize;<br>} stack;<br>stack* StackCreate(void);<br>int StackPop (stack * sta);<br>void StackPush (stack *sta,int i);<br>int StackNowSize (stack *sta);<br>int StackMaxSize (stack *sta);<br>bool StackIsEmpty (stack *sta);<br>//bool StackIsFull (stack *sta);<br>void StackFree (stack *sta);</p></blockquote><hr><blockquote><p>stacklib.c<br>#include “stacklib.h”<br>stack* StackCreate (void)<br>{<br>stack *temp=malloc(sizeof(stack));<br>temp-&gt;sta=(int *)malloc(sizeof(int)*STACK_INIT_SIZE);<br>temp-&gt;maxSize=STACK_INIT_SIZE;<br>temp-&gt;nowSize=0;<br>return temp-&gt;sta<mark>NULL?NULL:temp;<br>}<br>bool StackReSize(stack * sta,int size)<br>{<br>if (size&lt;=0)<br>return false;<br>int *temp=malloc(sizeof(int)*size);<br>if (temp</mark>NULL)<br>return false;<br>for (int i=0;i<sta->nowSize;i++)<br>{<br>temp[i]=sta-&gt;sta[i];<br>}<br>free (sta-&gt;sta);<br>sta-&gt;sta=temp;<br>sta-&gt;maxSize=size;<br>return true;<br>}<br>int StackPop(stack * sta)<br>{<br>if (StackIsEmpty(sta))<br>return -1;<br>int i=sta-&gt;sta[–sta-&gt;nowSize];<br>if (sta-&gt;maxSize/4&gt;=sta-&gt;nowSize)//空间过剩时，减少数组容量<br>{<br>StackReSize(sta,sta-&gt;maxSize/2);<br>}<br>return i;<br>}<br>void StackPush (stack <em>sta,int i)<br>{<br>if (sta-&gt;nowSize==sta-&gt;maxSize)//空间不够时，扩充数组容量<br>{<br>StackReSize(sta,sta-&gt;maxSize</em>2);<br>}<br>sta-&gt;sta[sta-&gt;nowSize++]=i;<br>}<br>int StackNowSize (stack *sta)<br>{<br>return sta-&gt;nowSize;<br>}<br>bool StackIsEmpty (stack *sta)<br>{<br>return sta-&gt;nowSize==0;<br>}<br>void StackFree(stack *sta)<br>{<br>free(sta-&gt;sta);<br>free(sta);<br>}<br>int StackMaxSize(stack *sta)<br>{<br>return sta-&gt;maxSize;<br>}</sta-></p></blockquote><p>最后，我运用栈来做了一个小计算器，可惜目前还不能实现判断运算的先后顺序，只能人为在每个运算后添加括号进行运算，比如5<em>2必须要输入(5</em>2)才能计算，代码如下：<br>#include “stacklib.h”<br>#ifndef READ_SIZE<br>#define READ_SIZE 30<br>#endif<br>int main(int argc, char const <em>argv[]) {<br>char ch[READ_SIZE];<br>fgets (ch,READ_SIZE,stdin);<br>stack <em>numSta=StackCreate();//数字栈<br>stack <em>chSta=StackCreate();//操作符栈<br>bool lastIsNum=false;//标志位，判断上个读取的字符是否是数字<br>for (int i=0;ch[i]!=’\0’&amp;&amp;ch[i]!=’\n’;i++)<br>{<br>switch (ch[i])<br>{<br>//若为操作符，压入操作符栈<br>case ‘+’:<br>case ‘-’:<br>case '</em>’:<br>case ‘/’:<br>case ‘%’:<br>lastIsNum=false;<br>StackPush(chSta,(int)ch[i]);<br>break;<br>case ‘)’😕/右括号表示前面是一个运算，进行运算<br>{<br>char op=StackPop(chSta);//取出操作符<br>int val=StackPop(numSta);//取出右操作数<br>switch (op)<br>{<br>case ‘+’:<br>val+=StackPop(numSta);<br>break;<br>case ‘-’:<br>val=StackPop(numSta)-val;<br>break;<br>case '</em>’:<br>val</em>=StackPop(numSta);<br>break;<br>case ‘/’:<br>val=StackPop(numSta)/val;<br>break;<br>case ‘%’:<br>val=StackPop(numSta)%val;<br>break;<br>default:<br>break;<br>}<br>StackPush(numSta,val);<br>lastIsNum=false;<br>}<br>break;<br>case ‘(’😕/左括号直接丢弃<br>lastIsNum=false;<br>break;<br>default:<br>if (ch[i]&gt;47&amp;&amp;ch[i]&lt;58)//判断是否为数字<br>{<br>if (lastIsNum==true)<br>{<br>int temp=StackPop(numSta);<br>temp=temp*10+(ch[i]-48);<br>StackPush(numSta,temp);<br>}<br>else<br>{<br>StackPush(numSta,ch[i]-48);<br>}<br>lastIsNum=true;<br>}<br>else//未预期的符号<br>{<br>printf(“Error\n” );<br>exit(-1);<br>}<br>break;<br>}<br>}<br>printf(&quot;%d\n&quot;,StackPop(numSta));<br>StackFree(numSta);<br>StackFree(chSta);<br>return 0;<br>}turn 0;<br>}</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>学习总结第二十一天——互质的判断</title>
      <link href="/2017/11/08/archive/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B8%80%E5%A4%A9%E2%80%94%E2%80%94%E4%BA%92%E8%B4%A8%E7%9A%84%E5%88%A4%E6%96%AD/"/>
      <url>/2017/11/08/archive/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B8%80%E5%A4%A9%E2%80%94%E2%80%94%E4%BA%92%E8%B4%A8%E7%9A%84%E5%88%A4%E6%96%AD/</url>
      
        <content type="html"><![CDATA[<p>今天解决的算法题目是对于两个数互质的判断，原本我认为这个方法应该不难，但是真正实现起来还是思考良久。问题的关键还是之前我没有考虑其中一个数会等于零，所以导致了一直都不对。最后还是用一个类似欧几里得的递归方法解决了这个问题，C代码如下</p><pre><code>bool isPrime (int p,int q){  if (p==0)    return q==1?true:false;  if (q==0)    return p==1?true:false;  if (p==q)    return true;  if (p&gt;q)    return isPrime(p%q,q);  else  return isPrime(p,q%p);}</code></pre><p>明天学习背包，队列和栈，打算学写一个能够直接读取式子的计算器。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>学习总结第二十天——欧几里得算法及其他</title>
      <link href="/2017/11/06/archive/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AC%AC%E4%BA%8C%E5%8D%81%E5%A4%A9%E2%80%94%E2%80%94%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E7%AE%97%E6%B3%95%E5%8F%8A%E5%85%B6%E4%BB%96/"/>
      <url>/2017/11/06/archive/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AC%AC%E4%BA%8C%E5%8D%81%E5%A4%A9%E2%80%94%E2%80%94%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E7%AE%97%E6%B3%95%E5%8F%8A%E5%85%B6%E4%BB%96/</url>
      
        <content type="html"><![CDATA[<p>今天了解了算法的鼻祖——欧几里得算法（辗转相除法），虽然这个算法是一个挺简单的算法，但是还是花了不少时间去弄懂，也算是体现出了我在算法上的不足。<br>算法如下：</p><pre><code>    int gcd (int p,int q)    {      printf(&quot;p=%d,q=%d\n&quot;,p,q);      if(p==0)      return q;      if(q==0)      return p;      if (p&gt;q)      return gcd(p%q,q);      else      return gcd(p,q%p);    }</code></pre><p>BTW，今天读了数学之美，又认识到了很多数学工具在解决实际问题的重要性，特别是概率论，让我受益匪浅。比如，语义识别最有效的方法不是词法分析，而是概率模型。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>学习总结第十九天</title>
      <link href="/2017/11/05/archive/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AC%AC%E5%8D%81%E4%B9%9D%E5%A4%A9/"/>
      <url>/2017/11/05/archive/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AC%AC%E5%8D%81%E4%B9%9D%E5%A4%A9/</url>
      
        <content type="html"><![CDATA[<p>这个星期又入了几本书，<del>开坑就没好好填完</del>。</p><p>首先是学习C艹方面，C艹对于类的学习算是告一段落了。C艹到目前为止，给我的一种感觉就是很繁琐。我想可能这也是为什么C艹没能完全取代C语言的地方。</p><p>然后开坑算法学习，目前我认为应当打好一些算法的基础，以后对于实际项目会有一定帮助，入了一本《算法》慢慢啃。也许现在的重心还是应当回到对算法的学习上，因为已经有C语言基础的前提下，并不给与去学习C++，并且如果学习以后又用不上就很容易遗忘。</p><p>最后是一些其他闲书，一是对ruby语言很感兴趣，可以在闲暇之余了解一番，然后看了一点《数学之美》，就我目前接触到的书而言，吴军博士的书质量都是值得一读的，读了《数学之美》后才明白，原来数学是可以这样使用的，真是有种醍醐灌顶的感觉。��都是值得一读的，读了《数学之美》后才明白，原来数学是可以这样使用的，真是有种醍醐灌顶的感觉。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>学习总结第十八天_C++类默认构造函数</title>
      <link href="/2017/10/31/archive/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AC%AC%E5%8D%81%E5%85%AB%E5%A4%A9_C++%E7%B1%BB%E9%BB%98%E8%AE%A4%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"/>
      <url>/2017/10/31/archive/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AC%AC%E5%8D%81%E5%85%AB%E5%A4%A9_C++%E7%B1%BB%E9%BB%98%E8%AE%A4%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>在继续对《C++ Primer》今天对于C++类的默认构造函数有了新的了解。</p><blockquote><p>默认构造函数是什么？</p></blockquote><p>默认构造函数，就是不包含任何参数，或者所有参数均提供了初始值的构造函数。</p><blockquote><p>什么时候会执行默认构造函数？</p></blockquote><p>当对象被默认初始化或者值初始化时会自动执行默认构造函数。</p><p>在很多时候，我们都会用到默认构造函数，而不仅仅是进行默认初始化的时候，所以如果定义了其他构造函数，最好也提供一个默认构造函数，即使这个类并没有一个合法的默认值。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>学习总结第十七天_类的作用域</title>
      <link href="/2017/10/29/archive/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AC%AC%E5%8D%81%E4%B8%83%E5%A4%A9_%E7%B1%BB%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
      <url>/2017/10/29/archive/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AC%AC%E5%8D%81%E4%B8%83%E5%A4%A9_%E7%B1%BB%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F/</url>
      
        <content type="html"><![CDATA[<p>今天基本上都在和DigitalOcean和AWS的客服周旋。。。所以没学什么，稍微了解了一下C++类的作用域。</p><p>每个类都会定义它自己的作用域。在类的作用域外，普通的数据和函数成员只能由对象，引用或者指针使用成员运算符访问。</p><p>如在Screen类中使用</p><pre><code>using pos=int;</code></pre><p>的话，在外部就需要用</p><pre><code>Screen::pos i;</code></pre><p>来声明变量</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>学习总结第十六天_开启全站HTTPS</title>
      <link href="/2017/10/28/archive/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AC%AC%E5%8D%81%E5%85%AD%E5%A4%A9_%E5%BC%80%E5%90%AF%E5%85%A8%E7%AB%99HTTPS/"/>
      <url>/2017/10/28/archive/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AC%AC%E5%8D%81%E5%85%AD%E5%A4%A9_%E5%BC%80%E5%90%AF%E5%85%A8%E7%AB%99HTTPS/</url>
      
        <content type="html"><![CDATA[<p>今天学习的内容是给自己的网站开启全站HTTPS。如果你是在我的博客阅读这篇文章的话，可能已经注意到，我的博客已经开启了全站HTTPS。虽然只是多少了一个S，但是传输过程区别很大。</p><blockquote><p>为什么要切换到全站HTTPS？</p></blockquote><p>因为HTTP是一种明文传输协议，非常容易被截获和修改，为了避免第三方对我们访问网站造成的影响，所以目前国际上都在推广HTTPS，可见HTTPS取代HTTP将是未来的大势所趋。所以我也不例外，加入了这个安全化的浪潮。有的人可能会觉得，不重要的网站不用开启HTTPS，但是无论网站重要与否，当用户访问的时候被恶意修改为钓鱼网站都是我们不想见到的。况且现在升级HTTPS成本很低了，有的机构SSL证书可以直接免费领取，所以升级HTTPS才是正解。</p><blockquote><p>切换HTTPS的步骤</p></blockquote><p>首先申请一个SSL证书，这里既可以选择收费的也可以选择免费的，我推荐使用<a href="https://letsencrypt.org/" target="_blank" rel="noopener">Let’s encrypt</a>的免费证书，这个证书可以到官网申请。</p><p>将这个SSL证书部署到你的服务器上，由于我用的是云空间，直接填写证书和私钥就可以了。</p><p>这时就可以通过https访问网站了，但是如果使用HTTP的话，还是能够进入网站，这时我们可以在服务器的Apache配置文件（.htaccess)下对HTTP访问设置301返回，就可以实现强制HTTPS,在文件后加入这几行:</p><pre><code>RewriteBase /RewriteCond %{HTTP:KERSSL} !onRewriteRule ^.*$ https://%{SERVER_NAME}%{REQUEST_URI} [L,R=301]</code></pre><p>做完这些工作,一般来说已经完成了,但是由于现在用的都是各种建站系统,里面的主题插件什么的难免用到外链HTTP资源.所以我们还需要将这些资源文件移动到自己的主机上.<br>开启浏览器的安全例外,然后在开发者控制台里的&quot;网络&quot;一栏对HTTP请求进行分析(记得禁用缓存),将其中的HTTP外链资源移到本地,再在相应的文件里面修改资源获取地址.就可以真正做到全站HTTPS啦!<br><img src="/attachment/img/https_analsis.png" alt="HTTP资源文件分析"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>学习总结第十五天_github学生包</title>
      <link href="/2017/10/27/archive/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AC%AC%E5%8D%81%E4%BA%94%E5%A4%A9_github%E5%AD%A6%E7%94%9F%E5%8C%85/"/>
      <url>/2017/10/27/archive/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AC%AC%E5%8D%81%E4%BA%94%E5%A4%A9_github%E5%AD%A6%E7%94%9F%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<p>今天虽然放假了，但是却没怎么看书，因为今天几乎都把时间花在了对github学生包的申请上了。<del>咸</del>由于这个过程着实踩了不少坑，就在今天的总结分享一下过程。</p><blockquote><p>Github学生包是什么？</p></blockquote><p><a href="https://education.github.com/pack" target="_blank" rel="noopener">Github学生包</a>是一个由github免费提供给学生的福利，里面包括了计算机专业可能用到的很多付费资源，通过认证后即可领取。</p><blockquote><p>怎么通过认证？</p></blockquote><p>Github提供了两种认证方式，一是edu邮箱认证，二是证件认证。作为天朝的学校，基本上是没有edu邮箱的，而即使有edu.cn的邮箱，通过率也很低。所以一般我们使用证件认证。打开github学生包页面，点击&quot;Get your pack&quot;按钮，然后下面会有提示让你进行登陆github账户和学生认证，只要上传你的学生证或者录取通知书就可以了。</p><blockquote><p>领取的学生包都有什么？</p></blockquote><ul><li>Atom:这个本来就是一个开源的免费编辑器，写代码和markdown挺好用的。</li><li>AWS educate:这个是亚马逊为学生提供的学生包，可以提供一个110刀的云服务器的额度。由于需要二次验证，所以我目前为止没有领取。</li><li>Bitnami:这是一个一键部署云应用的平台</li><li>CARTO:大数据可视化分析平台</li><li>Crowdflower:一个通过人工智能机器学习等来完善数据，增强数据的平台</li><li>Datadog:也是大数据相关</li><li>DigitalOcean:这个是一个AWS类似的云主机平台，但是由于之前学生优惠被滥用，所以现在不仅将100刀的优惠降为了50刀，并且对于学生资格审查很严格，通过了github认证以后，还要进行paypal或者信用卡认证，甚至可能要求你发身份证自拍照(没错就是我)。</li><li>Flatron school:一个Web开发的学习平台</li><li>Github:就读期间可以在Github无限制的创建私人项目</li><li>Hackhands:一个可以为你提供编程学习在线支持的网站</li><li>Microsoft Imgine:原来叫做DreamSpark，是微软做的一个学生免费计划，其中最有用的就是Azure云服务的100刀额度，可惜在中国不支持</li><li>Namecheap：这个可以领取一年的免费.me域名和ssl证书</li><li>Sendgrid:一个邮件发送平台</li><li>Sentry:在线调试平台</li><li>Stripe:支付平台</li><li>Taplytics:一个移动端A/B测试平台</li><li>Thinkful:也是一个Web技术学习平台</li><li>Transifex:也是一个Web技术学习平台</li><li>Travis CI:一个软件项目的集成整合平台</li><li>Unreal Engine:大名顶顶的虚幻引擎，可以用来学学游戏制作</li></ul><blockquote><p>应该怎样使用？<br>以上的这些东西，累计价值可能已经达到了上千刀，但是作为学生，我们没有精力也没有必要去全部都使用，而是选择自己感兴趣的，需要的东西去学习。</p></blockquote><p>最后，且用且珍惜，不要在让这些资源再次因为滥用而减少了。�了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>学习总结第十四天_再探浮点数</title>
      <link href="/2017/10/25/archive/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AC%AC%E5%8D%81%E5%9B%9B%E5%A4%A9_%E5%86%8D%E6%8E%A2%E6%B5%AE%E7%82%B9%E6%95%B0/"/>
      <url>/2017/10/25/archive/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AC%AC%E5%8D%81%E5%9B%9B%E5%A4%A9_%E5%86%8D%E6%8E%A2%E6%B5%AE%E7%82%B9%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>今天上导论和C语言课的时候，都对于浮点数有讲解，虽然之前已经大概了解浮点数的内容，但是今天对其进行了一些深入的探究，才发现浮点数并没有我想象中那么简单。</p><p>浮点数，很多人都只是把他当成一个普通的小数看待，在我之前的理解中，就是用类似科学计数法的方法去表示一个数。今天在通过翻阅wiki，才了解到浮点数的一些定义和奇特的性质，在下面做一些概括：</p><p>wikipedia是这样描述浮点数的：</p><blockquote><p>在计算机科学中，浮点（英语：floating point，缩写为FP）是一种对于实数的近似值数值表现法，由一个有效数字（即尾数）加上幂数来表示，通常是乘以某个基数的整数次指数得到。以这种表示法表示的数值，称为浮点数（floating-point number）。利用浮点进行运算，称为浮点计算，这种运算通常伴随着因为无法精确表示而进行的近似或舍入。位（bit）是衡量浮点数所需存储空间的单位，通常为32位或64位，分别被叫作单精度和双精度。有一些计算机提供更大的浮点数，一个浮点数a由两个数m和e来表示：a = m * b^e</p></blockquote><p>举个例子，1.2345这个数的十进制的浮点数表示方法就是12345*10^-4，这个时候我们称10是十进制浮点数的基底，我们要保存这个浮点数，只需要将12345和-4保存下来，就相当于保存了这个数。而二进制的浮点数与这个类似，只是将基底为10换为基底为2罢了。</p><p>需要特别说明的是，浮点数并不能精确表达所有实数，所以浮点数往往并不能精确计算。比如，二进制的浮点数中就不能精确的保存0.1这个十进制数，0.1的平方既不是准确的0.01，也不是最接近0.01的可表达的数。单精度（24比特）浮点数表示0.1的结果为</p><blockquote><p>e=-4,m= 110011001100110011001101 (2)</p></blockquote><p>即</p><blockquote><p>0.100000001490116119384765625</p></blockquote><p>此数的平方是</p><blockquote><p>0.010000000298023226097399174250313080847263336181640625</p></blockquote><p>但最接近0.01的可表达的数是</p><blockquote><p>0.009999999776482582092285156250</p></blockquote><p>所以我们在对于精度有特殊要求的时候应当避开使用浮点数。BTW，浮点加法和乘法不匹配结合律和分配律。</p><p>说到浮点数，就不得不提一下目前浮点数的标准IEEE 754，IEEE 754的全称叫做“电气电子工程师学会二进制浮点数算术标准”，在六七十年代，各家厂商使用的浮点数标准是不同的，所以当时的各厂商的计算机之间的兼容性很差。为了改善这个情况，IEEE（电气电子工程师学会（英语：Institute of Electrical and Electronics Engineers，简称为IEEE，是一个建立于1963年1月1日的国际性电子技术与电子工程师协会，亦是世界上最大的专业技术组织之一，制定了许多国际标准）这个组织的浮点数专业小组于七十年代末期开始酝酿浮点数的标准。在1980年，英特尔公司推出了单片的8087浮点数协处理器，其浮点数表示法及定义的运算具有足够的合理性、先进性，于是被IEEE采用作为浮点数的标准，于1985年发布。<br><img src="https://upload.wikimedia.org/wikipedia/commons/7/75/General_floating_point_frac.svg" alt="浮点数的表示图"></p><p>如果有兴趣的话，可以到<a href="https://zh.wikipedia.org/wiki/IEEE_754" target="_blank" rel="noopener">这里</a>详细了解IEEE 754的具体定义<del>，原谅我懒Orz</del></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>学习总结第十三天_类的私有功能函数</title>
      <link href="/2017/10/25/archive/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AC%AC%E5%8D%81%E4%B8%89%E5%A4%A9_%E7%B1%BB%E7%9A%84%E7%A7%81%E6%9C%89%E5%8A%9F%E8%83%BD%E5%87%BD%E6%95%B0/"/>
      <url>/2017/10/25/archive/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AC%AC%E5%8D%81%E4%B8%89%E5%A4%A9_%E7%B1%BB%E7%9A%84%E7%A7%81%E6%9C%89%E5%8A%9F%E8%83%BD%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>今天继续对C++类进行了学习，对于类的功能函数有了新的认识</p><p>一般来说，类的功能函数应该声明为公共的，但是有时候不同，比如在这种情况</p><pre><code>  public:  Screen&amp; display count (std::ostream &amp;os)  {    //Some code    return *this;  }</code></pre><p>这是一个类内的函数，其作用是输出类中的信息到指定的输出流中。这个函数实际对于类的成员变量并没有修改，所以我们一般会将其声明中加入count来保护，但是由于加入了count后，this是一个常量引用，所以无法正确返回，必须修改成这样。</p><pre><code>  public:  count Screen&amp; display count (std::ostream &amp;os)  {    //Some code    return *this;  }</code></pre><p>但是，这样的话由于返回的对象是一个count，就无法再进行其他写入操作了，比如这样：</p><pre><code>  myscr.display(os).write(' ');</code></pre><p>我们如果又不想放弃count的保护特性的话，便可以这样处理:</p><pre><code>  public:  Screen&amp; display(std::ostream &amp;os)  {    do_display(os);    return *this;  }  const Screen &amp;display (std::ostream &amp;os) const  {    do_display(os);    return *this;  }  private:  void do_display (std::ostream &amp;os) const  {      //Some code  }</code></pre><p>这样做，可以在public中对display这个函数进行重载以适应不同的调用情况，同时，用一个私有成员函数进行进行代码复用，这样就可以避开将来修改时可能引入的许多bug。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>学习总结第十二天_观《浪潮之巅》——风险投资</title>
      <link href="/2017/10/23/archive/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AC%AC%E5%8D%81%E4%BA%8C%E5%A4%A9_%E8%A7%82%E3%80%8A%E6%B5%AA%E6%BD%AE%E4%B9%8B%E5%B7%85%E3%80%8B%E2%80%94%E2%80%94%E9%A3%8E%E9%99%A9%E6%8A%95%E8%B5%84/"/>
      <url>/2017/10/23/archive/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AC%AC%E5%8D%81%E4%BA%8C%E5%A4%A9_%E8%A7%82%E3%80%8A%E6%B5%AA%E6%BD%AE%E4%B9%8B%E5%B7%85%E3%80%8B%E2%80%94%E2%80%94%E9%A3%8E%E9%99%A9%E6%8A%95%E8%B5%84/</url>
      
        <content type="html"><![CDATA[<p>今天的课和作业比较多，没有进行额外技术方面的学习。但在零碎时间里用kindle看了《浪潮之巅》的“幕后的英雄——风险投资”这一章，对目前的IT的风投创业过程有了一定的了解，整体大致如下：</p><blockquote><p>风险投资是一种新型的投资方式，既不需要抵押，也不需要偿还，如果成功，风投资本家可以获得几倍、几十倍甚至上百倍的回报，如果不成功，钱也就打水漂了。</p></blockquote><ol><li>创业者有一个好点子，认为这种技术很有前景，于是及时申请专利（关键，涉及知识产权）</li><li>继续对这项技术对于原有技术的提高的数量级进行模拟测试（关键，将决定技术是革新性的还是革命性的）</li><li>模拟将来可能的应用情景，补充相应的专利</li><li>自己或者让合伙人一起制定一个商业计划描述商业情景（关键）</li><li>找到对自己项目中意的天使投资人，让其对自己进行天使投资（PS：天使投资人，就是专门针对初创公司，进行项目评估并投资的一群人，这轮投资叫做天使轮）</li><li>进行股权分配，继续运营，直到形成一定规模，需要更多资金注入时，找到风险投资公司，进行第N轮的投资，最终选择合适的时机上市</li></ol><p>（由于进行了多轮投资，此时创始人手中的股权已经被稀释得差不多了，一般来讲，一个创始人在公司上市时还拥有10%的股份就很不错了）</p><p>这还只是非常简化的版本，实际创立一个公司要比上面的步骤复杂的多，可见创立一个公司，看起来容易，其实要做好的话，并不是拥有技术就能成功的。而一般来说，创始人到最后基本上已经不能控制公司了。创业水深，进入之前一定要做好十足的功课啊！前一定要做好十足的功课啊！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>学习总结第十一天_C++ 类</title>
      <link href="/2017/10/22/archive/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AC%AC%E5%8D%81%E4%B8%80%E5%A4%A9_C++%20%E7%B1%BB/"/>
      <url>/2017/10/22/archive/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AC%AC%E5%8D%81%E4%B8%80%E5%A4%A9_C++%20%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<p>今天对C++的类的基础创建操作进行了学习，但今天让我印象最深刻的还是class与struct的区分</p><p>学过C语言的人对于struct都应该印象深刻，如果没有接触C<ins>的话可能会以为类只能用class来声明，但其实不然。<br>在C</ins>中，struct的用法被进行了扩充，struct也是可以起到声明类的功能。</p><p>而struct和class的不同之处就在于struct成员的默认访问权限不同，struct是public，而class是private。换句话来说，下面两种形式的代码是等价的：</p><pre><code>    class cla    {      //Nothing      private:      //Some code      public:      //Some code    }</code></pre><p>和</p><pre><code>    struct cla    {      //Nothing      private:      //Some code      public:      //Some code    }</code></pre><p>由于class和struct的本质区别只有默认访问权限，所以如果我们自己再次进行定义访问权限的话，就不受到默认的影响了。所以，一般来说，用哪个都可以，但是为了代码的可读性，在定义的东西更接近于类的时候就用class，而接近于一个数据结构的话就用struct。话就用struct。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>学习总结第十天_git的学习</title>
      <link href="/2017/10/22/archive/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AC%AC%E5%8D%81%E5%A4%A9_git%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
      <url>/2017/10/22/archive/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AC%AC%E5%8D%81%E5%A4%A9_git%E7%9A%84%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>使用github的人都知道git这个版本控制软件，我也不例外，但之前一直处于一个“够用就好”的状态，命令只认识clone add commit和push，今天对git的分支和回滚方面进行了进一步的了解</p><p>git的详细指令可以</p><pre><code>man git</code></pre><p>git的分支是用来标记特定的代码提交，每一个分支通过SHA1sum值来标识，所以对分支进行的操作是轻量级的，所改变的仅仅是SHA1sum值。分支可以合并，但合并后仍然可以在原来的几个分支上进行开发。</p><p>今天还学到的是，最好不要用git pull，而是用git fetch和git merge代替之，因为git pull的问题是它把过程的细节都隐藏了起来，以至于你不用去了解git中各种类型分支的区别和使用方法。当然，多数时候这是没问题的，但一旦代码有问题，你很难找到出错的地方。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>学习总结第九天_vi的复习</title>
      <link href="/2017/10/20/archive/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AC%AC%E4%B9%9D%E5%A4%A9_vi%E7%9A%84%E5%A4%8D%E4%B9%A0/"/>
      <url>/2017/10/20/archive/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AC%AC%E4%B9%9D%E5%A4%A9_vi%E7%9A%84%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>今天对vi下的命令进行了一些学习，虽然学了，但是要勤加练习才有用，把vi的常用指令贴在下面，以供日后复习</p><h3 id="移动光标"><a class="markdownIt-Anchor" href="#移动光标"></a> 移动光标</h3><ul><li>h:向左移动一个字符</li><li>j:向下移动一个字符</li><li>k:向上移动一个字符</li><li>l:向右移动一个字符</li><li>[Ctrl] + f:屏幕向下移动一页</li><li>[Ctrl] + b :屏幕向上移动一页</li><li>0:跳到光标所在的行的开头</li><li>$:跳到光标所在的行的末尾</li><li>G:移动到文件的最后一行</li><li>gg: 移动到文件的第一行</li></ul><h3 id="搜索和替换"><a class="markdownIt-Anchor" href="#搜索和替换"></a> 搜索和替换</h3><ul><li>/word:向光标之下寻找一个名称为 word 的字符串</li><li>n1,n2s/word1/word2/g:n1 与 n2 为数字。在第 n1 与 n2 行之间寻找 word1 这个字符串，并将该字符串取代为 word2</li><li>1,$s/word1/word2/gc:从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！且在取代前显示提示字符给用户确认 (confirm) 是否需要取代</li></ul><h3 id="复制-粘贴-删除"><a class="markdownIt-Anchor" href="#复制-粘贴-删除"></a> 复制、粘贴、删除</h3><ul><li>yy:复制光标所在的那一行</li><li>x :删除光标所在的字符</li><li>dd:删除光标所在的一整行</li><li>p,P:粘贴复制的内容，p为粘贴在行后，P为行前</li><li>u:撤销之前所作的操作</li><li>[Ctrl]+r:还原上一个动作</li><li>.:重复上一个动作</li></ul><h3 id="不同方法进入编辑模式"><a class="markdownIt-Anchor" href="#不同方法进入编辑模式"></a> 不同方法进入编辑模式</h3><ul><li>i:插入模式（向前插入）</li><li>a:插入模式（向后插入）</li><li>o：插入模式（下一行插入）</li><li>r:替换模式</li></ul><p>进入编辑模式后按[esc]返回</p><h3 id="其他操作"><a class="markdownIt-Anchor" href="#其他操作"></a> 其他操作</h3><ul><li>:w:保存</li><li>:q:退出</li></ul><p>在学习这些命令之后，要多加复习才不会遗忘，所以应该制作一张表格放在书桌醒目的位置，以备随时查阅</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>学习总结第八天_tty1下播放视频（带弹幕）</title>
      <link href="/2017/10/19/archive/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AC%AC%E5%85%AB%E5%A4%A9_tty1%E4%B8%8B%E6%92%AD%E6%94%BE%E8%A7%86%E9%A2%91%EF%BC%88%E5%B8%A6%E5%BC%B9%E5%B9%95%EF%BC%89/"/>
      <url>/2017/10/19/archive/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AC%AC%E5%85%AB%E5%A4%A9_tty1%E4%B8%8B%E6%92%AD%E6%94%BE%E8%A7%86%E9%A2%91%EF%BC%88%E5%B8%A6%E5%BC%B9%E5%B9%95%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="中文命令行"><a class="markdownIt-Anchor" href="#中文命令行"></a> 中文命令行</h3><p>有一定经验的linux用户都知道，linux下有很多tty，有的是运行纯命令行的tty，当然为了<del>装逼</del>特殊需求，我们可能会用到在命令行下的一些工具，让命令行变得实用，今天我便对这些<del>装13</del>工具进行了一些了解</p><p>首先是在纯命令行下的中文支持，我们用</p><pre><code>sudo apt install fbterm fctix-fbterm-fronted</code></pre><p>来安装中文命令行和小企鹅拼音输入法,由于我目前使用的ubuntu17.04默认开启,所以不需要手动配置framebuffer</p><p>为了保证能够正常运行，还需要将自己的用户加入video组</p><pre><code>sudo usermod -a -G video username</code></pre><p>修改权限：</p><pre><code>sudo chmod u+s `which fbterm`</code></pre><p>使用</p><pre><code>fbterm -i fcitx-fbterm</code></pre><p>开启fberm并启用拼音</p><h3 id="播放电影"><a class="markdownIt-Anchor" href="#播放电影"></a> 播放电影</h3><p>安装：</p><pre><code>sudo apt install mplayer</code></pre><p>播放：</p><pre><code>mplayer -vo fbdev2 &lt;xx.avi&gt;</code></pre><p>PS:配合弹幕下载+xml转ass弹幕，你还可以享受在命令行看弹幕视频的感觉，如果想用字符画输出的话，将fbdev2改为aa（黑白）或者caca（彩色）</p><h3 id="截图工具"><a class="markdownIt-Anchor" href="#截图工具"></a> 截图工具</h3><p>安装：</p><pre><code>sudo apt install fbcat</code></pre><p>使用：</p><pre><code>fbgrab XX.png</code></pre><h3 id="分屏软件"><a class="markdownIt-Anchor" href="#分屏软件"></a> 分屏软件</h3><pre><code>sudo apt install tmux</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>学习总结第七天-oj的搭建</title>
      <link href="/2017/10/17/archive/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AC%AC%E4%B8%83%E5%A4%A9-oj%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
      <url>/2017/10/17/archive/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AC%AC%E4%B8%83%E5%A4%A9-oj%E7%9A%84%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>今天逛学信网的时候发现学籍信息已经录入，马上到阿里云购买了学生优惠主机，想到学校没有OJ系统，便决定利用现有的开源项目，自己搭建一个OJ系统。</p><p>购买阿里云后，开始ssh一直上不去，后来发现原来是没有设置端口开放。在控制台里配置好后，ssh登陆服务器</p><p>我使用的是<a href="https://github.com/zhblue/hustoj/blob/master" target="_blank" rel="noopener">HUSTOJ</a>开源项目,按照教程搭建后，就可以通过80端口直接访问服务器，在注册admin账户后，oj就算搭建好了，但因为没有备案，目前只能使用IP地址访问，题库也有待完善��</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>学习总结第六天</title>
      <link href="/2017/10/17/archive/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AC%AC%E5%85%AD%E5%A4%A9/"/>
      <url>/2017/10/17/archive/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AC%AC%E5%85%AD%E5%A4%A9/</url>
      
        <content type="html"><![CDATA[<p>今天比较忙，所以咸鱼了一下，只是对python的matplotlib绘制条形图做了一下了解。</p><p>首先是用matplotlib绘制条形图，只需要调用pyplot的bar()方法，下面是一个基本使用</p><pre><code>plt.bar(range(len(data)), data)plt.show()</code></pre><p>BTW，x轴的坐标除了可以用range()生成以外，还可以使用numpy库的arange()方法来生成，这个方法与range()类似，但可以产生小数，返回一个数组<br>例如</p><pre><code>numpy.arange(1,4,0.5)</code></pre><p>这个语句返回的就是一个(1,1.5,2,2.5,3,3.5,4)这样的数组一个(1,1.5,2,2.5,3,3.5,4)这样的数组</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>学习总结第四天-python3字符串问题</title>
      <link href="/2017/10/16/archive/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AC%AC%E5%9B%9B%E5%A4%A9-python3%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%97%AE%E9%A2%98/"/>
      <url>/2017/10/16/archive/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AC%AC%E5%9B%9B%E5%A4%A9-python3%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>今天对着《Python极客项目编程》上的第一个例子进行学习，了解了plistlib,matplotlib,numpy库的一些使用，但是在运行过程中出现了一些问题，在此做下记录。</p><p>有问题的代码如下：</p><pre><code>file=open(&quot;common.txt&quot;,'w');for val in commonTracks:    val=val[0];    s= val+'\n';    file.write(s.encode(&quot;UTF-8&quot;));</code></pre><p>运行时，解释器提示write方法接收的不是一个字符串。经过一番排查发现，通过encode转化为的并不是字符串，而是字节流bytes，在python中，bytes是字节流bytes对象，字符串是字符串str对象。</p><p>我们可以在python下实际运行一下这段代码</p><pre><code>a=&quot;Hello World&quot;;print(a.encode(&quot;UTF-8&quot;));</code></pre><p>我们会得到这样的输出：</p><pre><code>&gt;&gt;&gt; print(a.encode(&quot;UTF-8&quot;));b'Hello World'</code></pre><p>看起来和普通的字符串只是多了一个b，但这就表示这是一个字节流bytes，所以我们如果要向文件写入字节流的话，就要在open函数里，使用二进制模式，即将原来的代码改为</p><pre><code>file=open(&quot;common.txt&quot;,'wb');</code></pre><p>便解决了问题。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>学习总结第四天-linux下的开机启动脚本</title>
      <link href="/2017/10/15/archive/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AC%AC%E5%9B%9B%E5%A4%A9-linux%E4%B8%8B%E7%9A%84%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/"/>
      <url>/2017/10/15/archive/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AC%AC%E5%9B%9B%E5%A4%A9-linux%E4%B8%8B%E7%9A%84%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<p>当我们想要让某个程序开机在后台启动的时候，一种维护性较好的办法就是在linux下加入一个开机启动服务。</p><p>今天对于linux下的服务脚本的做了一些了解，环境为ubuntu 17.04</p><p>首先，系统上的每个服务的脚本都保存在/etc/init.c 下，这些文件都是一些sh脚本，可以直接执行。<br>下面是一个是一个init脚本：</p><pre><code>#!/bin/sh                                                         ### BEGIN INIT INFO# Provides:       kcptun# Required-Start: $network $syslog $local_fs $remote_fs $named# Required-Stop:  $network $local_fs $remote_fs# Default-Start:  2 3 4 5# Default-Stop:   0 1 6# Short-Description:  The start of kcptun# Description:    A script to run kcptun### END INIT INFOPATH=/usr/local/bin:/sbin:/usr/bin:/bincase &quot;$1&quot; in  start)      #sth. to start service      ;;  stop)      #sth. to stop service      ;;  restart)      #sth. to restart service      ;;  status)      #sth. to get service status      ;;  *)      echo 'Usage: service myservice {start|status|stop|restart}'      echo ''      exit 1esacexit 0</code></pre><p>首先是上面的注释部分，第一行是指明解析使用的解释器，然后便是INIT INFO，这里也是必不可少的部分，里面记录了脚本的一些相关信息，具体如下:</p><ul><li>Provides: 服务名称，这个应当和文件名相同</li><li>Required-Start:表示在这个服务启动前需要启动的服务</li><li>Required-Stop:表示在这个服务关闭前需要启动的服务</li><li>Default-Start:表示这个脚本在指定的运行等级下会启动</li><li>Default-Stop:表示这个脚本在指定的运行等级下会关闭</li><li>Short-Description:简短描述</li><li>Description:描述</li></ul><p>然后声明PATH变量，方便我们调用各种脚本</p><p>接下来是对传入参数进行判断，这里的 $1 是传入的参数，可以在里面的不同参数下加入自己的代码</p><p>然后将这个文件放到/etc/init.d/下</p><p>在/etc/rc.d 下我们可以看到各个服务在不同运行级别下的启动关系，当然我们并不需要亲自去修改这些文件，系统已经给我们提供了工具来自动修改这些文件，在ubuntu下，这个工具是<code>update-rc.d</code></p><p>我们可以运行</p><pre><code>update-rc.d &lt;yourservice&gt; default</code></pre><p>便可以让系统配置好脚本，在合适的时候启动�动</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>学习总结第三天</title>
      <link href="/2017/10/13/archive/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AC%AC%E4%B8%89%E5%A4%A9/"/>
      <url>/2017/10/13/archive/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AC%AC%E4%B8%89%E5%A4%A9/</url>
      
        <content type="html"><![CDATA[<p>今天本要写一个Web Extension，但一个密码框加入图标的方法目前没有什么好的解决方案，所以便暂时放置，转而学习gqrx的使用</p><hr><p>gqrx是linux下的一个开源的软件无线电程序，我配合hackrf硬件，进行了FM和航空无线电的接收实验。</p><h3 id="fm广播接受"><a class="markdownIt-Anchor" href="#fm广播接受"></a> FM广播接受</h3><p>打开gqrx，启动,在Reciver option中进行如下设置：</p><ul><li>Frequency:频率，输入大致要收听的频段</li><li>Mode:这里选择WFM(Mono)以收听调频广播</li><li>AGC: Fast</li><li>Squelch:这个值在能听清的情况下越小消除噪音效果越好</li></ul><p>此时应当能听到沙沙声，观察图像，黄色和红色的部分就是有无线信号的地方，拖动红线，就可以切换频道收听了</p><p>图</p><h3 id="航空无线电接收"><a class="markdownIt-Anchor" href="#航空无线电接收"></a> 航空无线电接收</h3><p>航空无线电接收与FM广播也是大同小异，只要把mode调至AM，并调到适合的频率，就可以听到机组与地面的通信了，但是我由于等了半个小时也没收到通信，于是就不贴图了贴图了</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>学习总结第二天_WebExtension结构</title>
      <link href="/2017/10/12/archive/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AC%AC%E4%BA%8C%E5%A4%A9_WebExtension%E7%BB%93%E6%9E%84/"/>
      <url>/2017/10/12/archive/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AC%AC%E4%BA%8C%E5%A4%A9_WebExtension%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>WebExtension实质上和android app一样，是一个特殊的zip压缩包，今天大致了解了一下这个特殊的包里可能出现的文件。</p><p>每个WebExtension都有一个关键的文件：manifest.json</p><p>这是浏览器在解析插件时读取的第一个文件，这个文件中定义了这个插件应该包含的其他文件，可以指向以下类型的文件</p><ul><li>background pages: 字面意思，一个在后台运行的页面，执行一个长时间运行的逻辑</li><li>content scripts: 与网页进行交互,这类是可以插入到网页中的js脚本</li><li>browser action files: 在工具栏中添加按钮所需要的文件</li><li>page action files: 在地址栏添加按钮所需文件</li><li>options pages: 为用户定义一个可浏览的UI界面，可以改变插件的设置</li><li>web-accessible resources: 使打包好的内容可用于网页与目录脚本</li></ul><p>总共的这些就构成了WebExtension的结构，只要认识到这些，就能够方便对插件进行修改</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>学习总结第一天_初识WebExtension</title>
      <link href="/2017/10/11/archive/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AC%AC%E4%B8%80%E5%A4%A9_%E5%88%9D%E8%AF%86WebExtension/"/>
      <url>/2017/10/11/archive/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AC%AC%E4%B8%80%E5%A4%A9_%E5%88%9D%E8%AF%86WebExtension/</url>
      
        <content type="html"><![CDATA[<p>这是上大学以来第一次写学习总结，希望能够一直坚持下去。在更新firefox浏览器以后，曾经的插件出现的明显的“旧式”标签，查了资料发现，Firefox将在57版本将停止对所有非WebExtension插件的支持，所以有必要去做一些了解。</p><p><em>什么是WebExtension？</em></p><p>根据Mozilia文档的定义，是这样解释的</p><blockquote><p>WebExtensions是跨浏览器开发的附加组件，与 Google Chrome、Opera 和 W3C 草稿社区组织 所支持的 扩展 API 在很大程度上兼容，大多数情况下为这些浏览器编写的扩展只需少许修改即可在 Firefox 、Microsoft Edge 中运行。这种 API 与 多进程 Firefox 完全兼容。</p></blockquote><p>可见，WebExtension是一种可以跨运行浏览器的插件，所以不难得出这就是附加组件未来的方向，Firefox为了给多进程技术让道，所以停止了老式组件的支持，虽然让很多开发者不得不停止老式插件的支持，转而采用WebExtension，但开发者一旦采用WebExtension，就可以轻易的移植到不同浏览器上。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Markdown学习</title>
      <link href="/2017/10/10/archive/Markdown%E5%AD%A6%E4%B9%A0/"/>
      <url>/2017/10/10/archive/Markdown%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="首先markdown是什么"><a class="markdownIt-Anchor" href="#首先markdown是什么"></a> 首先，Markdown是什么？</h1><blockquote><p>Markdown 是一种轻量级标记语言，创始人为约翰·格鲁伯（英语：John Gruber）。它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML(或者HTML)文档”。[4]这种语言吸收了很多在电子邮件中已有的纯文本标记的特性。</p></blockquote><p>接下来的一个学期里，即将坚持写学习体会，所以有必要掌握markdown这种具有很好写作体验的标记语言，从而写出的笔记更容易突出重点</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
